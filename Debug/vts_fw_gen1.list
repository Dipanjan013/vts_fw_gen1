
vts_fw_gen1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08006cc4  08006cc4  00016cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc0  08006fc0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fc8  08006fc8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bd0  2000006c  0800703c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c3c  0800703c  00024c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001376f  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000339f  00000000  00000000  0003384e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00036bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c70  00000000  00000000  00037c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c1a  00000000  00000000  000388b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013306  00000000  00000000  0003d4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000923ff  00000000  00000000  000507d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a40  00000000  00000000  000e2bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e7618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006cac 	.word	0x08006cac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006cac 	.word	0x08006cac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000594:	1d39      	adds	r1, r7, #4
 8000596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800059a:	2201      	movs	r2, #1
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <__io_putchar+0x20>)
 800059e:	f001 fabf 	bl	8001b20 <HAL_UART_Transmit>
  return ch;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000088 	.word	0x20000088

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fa72 	bl	8000a9c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f80a 	bl	80005d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f890 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f864 	bl	800068c <MX_USART2_UART_Init>

  /* Entry function to app */
  app_main();
 80005c4:	f005 f8bc 	bl	8005740 <app_main>
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 fdba 	bl	8006158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xb4>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xb4>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SystemClock_Config+0xb4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <SystemClock_Config+0xb8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <SystemClock_Config+0xb8>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <SystemClock_Config+0xb8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fdc5 	bl	80011d0 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800064c:	f000 f862 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f828 	bl	80016c0 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000676:	f000 f84d 	bl	8000714 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART2_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f001 f9dc 	bl	8001a80 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f821 	bl	8000714 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000088 	.word	0x20000088
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_GPIO_Init+0x30>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <MX_GPIO_Init+0x30>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_GPIO_Init+0x30>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_MspInit+0x54>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <HAL_MspInit+0x54>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x54>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <HAL_MspInit+0x54>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <HAL_MspInit+0x54>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_MspInit+0x54>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	210f      	movs	r1, #15
 8000762:	f06f 0001 	mvn.w	r0, #1
 8000766:	f000 fae6 	bl	8000d36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a36      	ldr	r2, [pc, #216]	; (8000870 <HAL_UART_MspInit+0xf8>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d135      	bne.n	8000806 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b35      	ldr	r3, [pc, #212]	; (8000874 <HAL_UART_MspInit+0xfc>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	4a34      	ldr	r2, [pc, #208]	; (8000874 <HAL_UART_MspInit+0xfc>)
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6453      	str	r3, [r2, #68]	; 0x44
 80007aa:	4b32      	ldr	r3, [pc, #200]	; (8000874 <HAL_UART_MspInit+0xfc>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_UART_MspInit+0xfc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <HAL_UART_MspInit+0xfc>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <HAL_UART_MspInit+0xfc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007e4:	2307      	movs	r3, #7
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4822      	ldr	r0, [pc, #136]	; (8000878 <HAL_UART_MspInit+0x100>)
 80007f0:	f000 fb6a 	bl	8000ec8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2105      	movs	r1, #5
 80007f8:	2025      	movs	r0, #37	; 0x25
 80007fa:	f000 fa9c 	bl	8000d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007fe:	2025      	movs	r0, #37	; 0x25
 8000800:	f000 fab5 	bl	8000d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000804:	e030      	b.n	8000868 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <HAL_UART_MspInit+0x104>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d12b      	bne.n	8000868 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_UART_MspInit+0xfc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a16      	ldr	r2, [pc, #88]	; (8000874 <HAL_UART_MspInit+0xfc>)
 800081a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_UART_MspInit+0xfc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_UART_MspInit+0xfc>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_UART_MspInit+0xfc>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_UART_MspInit+0xfc>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000848:	230c      	movs	r3, #12
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000858:	2307      	movs	r3, #7
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <HAL_UART_MspInit+0x100>)
 8000864:	f000 fb30 	bl	8000ec8 <HAL_GPIO_Init>
}
 8000868:	bf00      	nop
 800086a:	3730      	adds	r7, #48	; 0x30
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40011000 	.word	0x40011000
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	40004400 	.word	0x40004400

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f946 	bl	8000b40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008b4:	f003 feb0 	bl	8004618 <xTaskGetSchedulerState>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d001      	beq.n	80008c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008be:	f004 fc9b 	bl	80051f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&gsmHandle/*huart1*/);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <USART1_IRQHandler+0x10>)
 80008ce:	f001 fa45 	bl	8001d5c <HAL_UART_IRQHandler>


/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20004a2c 	.word	0x20004a2c

080008dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e00a      	b.n	8000904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ee:	f3af 8000 	nop.w
 80008f2:	4601      	mov	r1, r0
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	60ba      	str	r2, [r7, #8]
 80008fa:	b2ca      	uxtb	r2, r1
 80008fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbf0      	blt.n	80008ee <_read+0x12>
  }

  return len;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e009      	b.n	800093c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe2b 	bl	800058c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf1      	blt.n	8000928 <_write+0x12>
  }
  return len;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_close>:

int _close(int file)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000976:	605a      	str	r2, [r3, #4]
  return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_isatty>:

int _isatty(int file)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c0:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <_sbrk+0x5c>)
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <_sbrk+0x60>)
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_sbrk+0x64>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <_sbrk+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d207      	bcs.n	80009f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e8:	f005 fc16 	bl	8006218 <__errno>
 80009ec:	4603      	mov	r3, r0
 80009ee:	220c      	movs	r2, #12
 80009f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	e009      	b.n	8000a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <_sbrk+0x64>)
 8000a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20020000 	.word	0x20020000
 8000a18:	00000400 	.word	0x00000400
 8000a1c:	200000d0 	.word	0x200000d0
 8000a20:	20004c40 	.word	0x20004c40

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SystemInit+0x20>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <SystemInit+0x20>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4c:	f7ff ffea 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a52:	490d      	ldr	r1, [pc, #52]	; (8000a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a68:	4c0a      	ldr	r4, [pc, #40]	; (8000a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a76:	f005 fbd5 	bl	8006224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7a:	f7ff fd99 	bl	80005b0 <main>
  bx  lr    
 8000a7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a8c:	08006fd0 	.word	0x08006fd0
  ldr r2, =_sbss
 8000a90:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a94:	20004c3c 	.word	0x20004c3c

08000a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_Init+0x40>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_Init+0x40>)
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x40>)
 8000abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f92b 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	200f      	movs	r0, #15
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fe26 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f943 	bl	8000d8a <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f90b 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	200000d4 	.word	0x200000d4

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200000d4 	.word	0x200000d4

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff3e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff31 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa2 	bl	8000cdc <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff feda 	bl	8000b68 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d008      	beq.n	8000dd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e052      	b.n	8000e7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0216 	bic.w	r2, r2, #22
 8000de2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d103      	bne.n	8000e04 <HAL_DMA_Abort+0x62>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d007      	beq.n	8000e14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0208 	bic.w	r2, r2, #8
 8000e12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0201 	bic.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e24:	e013      	b.n	8000e4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e26:	f7ff fe9f 	bl	8000b68 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b05      	cmp	r3, #5
 8000e32:	d90c      	bls.n	8000e4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2220      	movs	r2, #32
 8000e38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e015      	b.n	8000e7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1e4      	bne.n	8000e26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e60:	223f      	movs	r2, #63	; 0x3f
 8000e62:	409a      	lsls	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d004      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e00c      	b.n	8000eba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2205      	movs	r2, #5
 8000ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0201 	bic.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e159      	b.n	8001198 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 8148 	bne.w	8001192 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d005      	beq.n	8000f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d130      	bne.n	8000f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f003 0201 	and.w	r2, r3, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d017      	beq.n	8000fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a2 	beq.w	8001192 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a56      	ldr	r2, [pc, #344]	; (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b54      	ldr	r3, [pc, #336]	; (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <HAL_GPIO_Init+0x2ec>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <HAL_GPIO_Init+0x2f0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d019      	beq.n	80010ca <HAL_GPIO_Init+0x202>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a48      	ldr	r2, [pc, #288]	; (80011bc <HAL_GPIO_Init+0x2f4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x1fe>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <HAL_GPIO_Init+0x2f8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x1fa>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <HAL_GPIO_Init+0x2fc>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x1f6>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <HAL_GPIO_Init+0x300>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x1f2>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010ba:	2307      	movs	r3, #7
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010ca:	2300      	movs	r3, #0
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	4935      	ldr	r1, [pc, #212]	; (80011b4 <HAL_GPIO_Init+0x2ec>)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_GPIO_Init+0x304>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110e:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <HAL_GPIO_Init+0x304>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_GPIO_Init+0x304>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001138:	4a24      	ldr	r2, [pc, #144]	; (80011cc <HAL_GPIO_Init+0x304>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_GPIO_Init+0x304>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001162:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_GPIO_Init+0x304>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_GPIO_Init+0x304>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118c:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_GPIO_Init+0x304>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	f67f aea2 	bls.w	8000ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e267      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ee:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00c      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4b85      	ldr	r3, [pc, #532]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	2b08      	cmp	r3, #8
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e242      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b70      	ldr	r3, [pc, #448]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6f      	ldr	r2, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b69      	ldr	r3, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a68      	ldr	r2, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a65      	ldr	r2, [pc, #404]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fc6e 	bl	8000b68 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fc6a 	bl	8000b68 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e207      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc5a 	bl	8000b68 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fc56 	bl	8000b68 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1f3      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d063      	beq.n	80013ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d11c      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1c7      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4937      	ldr	r1, [pc, #220]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	e03a      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_RCC_OscConfig+0x244>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fc0f 	bl	8000b68 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fc0b 	bl	8000b68 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1a8      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4925      	ldr	r1, [pc, #148]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x244>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fbee 	bl	8000b68 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fbea 	bl	8000b68 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e187      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d036      	beq.n	8001428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_OscConfig+0x248>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbce 	bl	8000b68 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fbca 	bl	8000b68 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e167      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
 80013ee:	e01b      	b.n	8001428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_OscConfig+0x248>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fbb7 	bl	8000b68 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	e00e      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fbb3 	bl	8000b68 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d907      	bls.n	800141c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e150      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001410:	40023800 	.word	0x40023800
 8001414:	42470000 	.word	0x42470000
 8001418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ea      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8097 	beq.w	8001564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a7c      	ldr	r2, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b77      	ldr	r3, [pc, #476]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b74      	ldr	r3, [pc, #464]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a73      	ldr	r2, [pc, #460]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fb73 	bl	8000b68 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff fb6f 	bl	8000b68 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e10c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x2ea>
 80014ac:	4b64      	ldr	r3, [pc, #400]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	4a63      	ldr	r2, [pc, #396]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	; 0x70
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x30c>
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a57      	ldr	r2, [pc, #348]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	4b55      	ldr	r3, [pc, #340]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a54      	ldr	r2, [pc, #336]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d015      	beq.n	8001528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fb34 	bl	8000b68 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff fb30 	bl	8000b68 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0cb      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0ee      	beq.n	8001504 <HAL_RCC_OscConfig+0x334>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fb1e 	bl	8000b68 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fb1a 	bl	8000b68 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0b5      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ee      	bne.n	8001530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a1 	beq.w	80016b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d05c      	beq.n	8001634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d141      	bne.n	8001606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff faee 	bl	8000b68 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff faea 	bl	8000b68 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e087      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	491b      	ldr	r1, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fac3 	bl	8000b68 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fabf 	bl	8000b68 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e05c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x416>
 8001604:	e054      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff faac 	bl	8000b68 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff faa8 	bl	8000b68 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e045      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x444>
 8001632:	e03d      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e038      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000
 8001648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d028      	beq.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d121      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d11a      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800167c:	4013      	ands	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001684:	4293      	cmp	r3, r2
 8001686:	d111      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff f9da 	bl	8000b68 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff f9d6 	bl	8000b68 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f93a 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	08006f2c 	.word	0x08006f2c
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001890:	b090      	sub	sp, #64	; 0x40
 8001892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
 8001898:	2300      	movs	r3, #0
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d00d      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	f200 80a1 	bhi.w	80019f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018be:	e09b      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018c4:	e09b      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ca:	e098      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d028      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	2200      	movs	r2, #0
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	627a      	str	r2, [r7, #36]	; 0x24
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018f4:	2100      	movs	r1, #0
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80018f8:	fb03 f201 	mul.w	r2, r3, r1
 80018fc:	2300      	movs	r3, #0
 80018fe:	fb00 f303 	mul.w	r3, r0, r3
 8001902:	4413      	add	r3, r2
 8001904:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x188>)
 8001906:	fba0 1202 	umull	r1, r2, r0, r2
 800190a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800190c:	460a      	mov	r2, r1
 800190e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001912:	4413      	add	r3, r2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001918:	2200      	movs	r2, #0
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	61fa      	str	r2, [r7, #28]
 800191e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001922:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001926:	f7fe fcb3 	bl	8000290 <__aeabi_uldivmod>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4613      	mov	r3, r2
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001932:	e053      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	2200      	movs	r2, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	617a      	str	r2, [r7, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001946:	f04f 0b00 	mov.w	fp, #0
 800194a:	4652      	mov	r2, sl
 800194c:	465b      	mov	r3, fp
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	ebb2 080a 	subs.w	r8, r2, sl
 8001966:	eb63 090b 	sbc.w	r9, r3, fp
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001976:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800197a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800197e:	ebb2 0408 	subs.w	r4, r2, r8
 8001982:	eb63 0509 	sbc.w	r5, r3, r9
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	00eb      	lsls	r3, r5, #3
 8001990:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001994:	00e2      	lsls	r2, r4, #3
 8001996:	4614      	mov	r4, r2
 8001998:	461d      	mov	r5, r3
 800199a:	eb14 030a 	adds.w	r3, r4, sl
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	eb45 030b 	adc.w	r3, r5, fp
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b2:	4629      	mov	r1, r5
 80019b4:	028b      	lsls	r3, r1, #10
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019bc:	4621      	mov	r1, r4
 80019be:	028a      	lsls	r2, r1, #10
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c6:	2200      	movs	r2, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	60fa      	str	r2, [r7, #12]
 80019cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d0:	f7fe fc5e 	bl	8000290 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	3301      	adds	r3, #1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019f6:	e002      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3740      	adds	r7, #64	; 0x40
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	017d7840 	.word	0x017d7840

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a34:	f7ff fff0 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0a9b      	lsrs	r3, r3, #10
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08006f3c 	.word	0x08006f3c

08001a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a5c:	f7ff ffdc 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0b5b      	lsrs	r3, r3, #13
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4903      	ldr	r1, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08006f3c 	.word	0x08006f3c

08001a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e042      	b.n	8001b18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe fe66 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fe15 	bl	80026f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d175      	bne.n	8001c2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_UART_Transmit+0x2c>
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e06e      	b.n	8001c2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2221      	movs	r2, #33	; 0x21
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b5e:	f7ff f803 	bl	8000b68 <HAL_GetTick>
 8001b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	88fa      	ldrh	r2, [r7, #6]
 8001b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b78:	d108      	bne.n	8001b8c <HAL_UART_Transmit+0x6c>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d104      	bne.n	8001b8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	e003      	b.n	8001b94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b94:	e02e      	b.n	8001bf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 fb77 	bl	8002294 <UART_WaitOnFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e03a      	b.n	8001c2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10b      	bne.n	8001bd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e007      	b.n	8001be6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	3301      	adds	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1cb      	bne.n	8001b96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2140      	movs	r1, #64	; 0x40
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 fb43 	bl	8002294 <UART_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e006      	b.n	8001c2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c2c:	2302      	movs	r3, #2
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	4613      	mov	r3, r2
 8001c42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d121      	bne.n	8001c94 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_UART_Transmit_IT+0x26>
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e01a      	b.n	8001c96 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	88fa      	ldrh	r2, [r7, #6]
 8001c70:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2221      	movs	r2, #33	; 0x21
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c8e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b08c      	sub	sp, #48	; 0x30
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	4613      	mov	r3, r2
 8001cae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d14a      	bne.n	8001d52 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e043      	b.n	8001d54 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fb31 	bl	8002346 <UART_Start_Receive_IT>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d12c      	bne.n	8001d4c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d125      	bne.n	8001d46 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	330c      	adds	r3, #12
 8001d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	e853 3f00 	ldrex	r3, [r3]
 8001d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f043 0310 	orr.w	r3, r3, #16
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	330c      	adds	r3, #12
 8001d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d30:	627a      	str	r2, [r7, #36]	; 0x24
 8001d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d34:	6a39      	ldr	r1, [r7, #32]
 8001d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d38:	e841 2300 	strex	r3, r2, [r1]
 8001d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e5      	bne.n	8001d10 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8001d44:	e002      	b.n	8001d4c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8001d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d50:	e000      	b.n	8001d54 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
  }
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3730      	adds	r7, #48	; 0x30
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0ba      	sub	sp, #232	; 0xe8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_UART_IRQHandler+0x66>
 8001dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fbdc 	bl	8002578 <UART_Receive_IT>
      return;
 8001dc0:	e25b      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80de 	beq.w	8001f88 <HAL_UART_IRQHandler+0x22c>
 8001dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d106      	bne.n	8001de6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ddc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80d1 	beq.w	8001f88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_UART_IRQHandler+0xae>
 8001df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_UART_IRQHandler+0xd2>
 8001e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f043 0202 	orr.w	r2, r3, #2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_UART_IRQHandler+0xf6>
 8001e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d011      	beq.n	8001e82 <HAL_UART_IRQHandler+0x126>
 8001e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f043 0208 	orr.w	r2, r3, #8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 81f2 	beq.w	8002270 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_UART_IRQHandler+0x14e>
 8001e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fb67 	bl	8002578 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_UART_IRQHandler+0x17a>
 8001ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d04f      	beq.n	8001f76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa6f 	bl	80023ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d141      	bne.n	8001f6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3314      	adds	r3, #20
 8001ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ef8:	e853 3f00 	ldrex	r3, [r3]
 8001efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3314      	adds	r3, #20
 8001f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f26:	e841 2300 	strex	r3, r2, [r1]
 8001f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1d9      	bne.n	8001eea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d013      	beq.n	8001f66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	4a7e      	ldr	r2, [pc, #504]	; (800213c <HAL_UART_IRQHandler+0x3e0>)
 8001f44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe ff99 	bl	8000e82 <HAL_DMA_Abort_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f60:	4610      	mov	r0, r2
 8001f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f64:	e00e      	b.n	8001f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f003 fe42 	bl	8005bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f6c:	e00a      	b.n	8001f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f003 fe3e 	bl	8005bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f74:	e006      	b.n	8001f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f003 fe3a 	bl	8005bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f82:	e175      	b.n	8002270 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f84:	bf00      	nop
    return;
 8001f86:	e173      	b.n	8002270 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 814f 	bne.w	8002230 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8148 	beq.w	8002230 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8141 	beq.w	8002230 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fce:	2b40      	cmp	r3, #64	; 0x40
 8001fd0:	f040 80b6 	bne.w	8002140 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8145 	beq.w	8002274 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	f080 813e 	bcs.w	8002274 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ffe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800200a:	f000 8088 	beq.w	800211e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	330c      	adds	r3, #12
 8002014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800201c:	e853 3f00 	ldrex	r3, [r3]
 8002020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800202c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800203a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800203e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800204a:	e841 2300 	strex	r3, r2, [r1]
 800204e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1d9      	bne.n	800200e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3314      	adds	r3, #20
 8002060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002064:	e853 3f00 	ldrex	r3, [r3]
 8002068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800206a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3314      	adds	r3, #20
 800207a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800207e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800208a:	e841 2300 	strex	r3, r2, [r1]
 800208e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1e1      	bne.n	800205a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3314      	adds	r3, #20
 800209c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020a0:	e853 3f00 	ldrex	r3, [r3]
 80020a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80020a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3314      	adds	r3, #20
 80020b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020c2:	e841 2300 	strex	r3, r2, [r1]
 80020c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80020c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e3      	bne.n	8002096 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	330c      	adds	r3, #12
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e6:	e853 3f00 	ldrex	r3, [r3]
 80020ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ee:	f023 0310 	bic.w	r3, r3, #16
 80020f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	330c      	adds	r3, #12
 80020fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002100:	65ba      	str	r2, [r7, #88]	; 0x58
 8002102:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002108:	e841 2300 	strex	r3, r2, [r1]
 800210c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800210e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e3      	bne.n	80020dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fe42 	bl	8000da2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800212c:	b29b      	uxth	r3, r3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	b29b      	uxth	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f003 fd4d 	bl	8005bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800213a:	e09b      	b.n	8002274 <HAL_UART_IRQHandler+0x518>
 800213c:	08002481 	.word	0x08002481
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002148:	b29b      	uxth	r3, r3
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 808e 	beq.w	8002278 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800215c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8089 	beq.w	8002278 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002170:	e853 3f00 	ldrex	r3, [r3]
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800217c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	330c      	adds	r3, #12
 8002186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800218a:	647a      	str	r2, [r7, #68]	; 0x44
 800218c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002192:	e841 2300 	strex	r3, r2, [r1]
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1e3      	bne.n	8002166 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3314      	adds	r3, #20
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	e853 3f00 	ldrex	r3, [r3]
 80021ac:	623b      	str	r3, [r7, #32]
   return(result);
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3314      	adds	r3, #20
 80021be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021c2:	633a      	str	r2, [r7, #48]	; 0x30
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ca:	e841 2300 	strex	r3, r2, [r1]
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1e3      	bne.n	800219e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	330c      	adds	r3, #12
 80021ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	e853 3f00 	ldrex	r3, [r3]
 80021f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0310 	bic.w	r3, r3, #16
 80021fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
 8002204:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002208:	61fa      	str	r2, [r7, #28]
 800220a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220c:	69b9      	ldr	r1, [r7, #24]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	e841 2300 	strex	r3, r2, [r1]
 8002214:	617b      	str	r3, [r7, #20]
   return(result);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e3      	bne.n	80021e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f003 fcd3 	bl	8005bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800222e:	e023      	b.n	8002278 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <HAL_UART_IRQHandler+0x4f4>
 800223c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f92d 	bl	80024a8 <UART_Transmit_IT>
    return;
 800224e:	e014      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <HAL_UART_IRQHandler+0x51e>
 800225c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f96d 	bl	8002548 <UART_EndTransmit_IT>
    return;
 800226e:	e004      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
    return;
 8002270:	bf00      	nop
 8002272:	e002      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
      return;
 8002274:	bf00      	nop
 8002276:	e000      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
      return;
 8002278:	bf00      	nop
  }
}
 800227a:	37e8      	adds	r7, #232	; 0xe8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a4:	e03b      	b.n	800231e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d037      	beq.n	800231e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7fe fc5b 	bl	8000b68 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	6a3a      	ldr	r2, [r7, #32]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e03a      	b.n	800233e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d023      	beq.n	800231e <UART_WaitOnFlagUntilTimeout+0x8a>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d020      	beq.n	800231e <UART_WaitOnFlagUntilTimeout+0x8a>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d01d      	beq.n	800231e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d116      	bne.n	800231e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f857 	bl	80023ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2208      	movs	r2, #8
 8002310:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4013      	ands	r3, r2
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	429a      	cmp	r2, r3
 800233a:	d0b4      	beq.n	80022a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	4613      	mov	r3, r2
 8002352:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	88fa      	ldrh	r2, [r7, #6]
 800235e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	88fa      	ldrh	r2, [r7, #6]
 8002364:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2222      	movs	r2, #34	; 0x22
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0220 	orr.w	r2, r2, #32
 80023aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b095      	sub	sp, #84	; 0x54
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023cc:	e853 3f00 	ldrex	r3, [r3]
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	330c      	adds	r3, #12
 80023e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023e2:	643a      	str	r2, [r7, #64]	; 0x40
 80023e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023ea:	e841 2300 	strex	r3, r2, [r1]
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1e5      	bne.n	80023c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3314      	adds	r3, #20
 80023fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	e853 3f00 	ldrex	r3, [r3]
 8002404:	61fb      	str	r3, [r7, #28]
   return(result);
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	64bb      	str	r3, [r7, #72]	; 0x48
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3314      	adds	r3, #20
 8002414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800241c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e5      	bne.n	80023f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	2b01      	cmp	r3, #1
 8002430:	d119      	bne.n	8002466 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	330c      	adds	r3, #12
 8002438:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	e853 3f00 	ldrex	r3, [r3]
 8002440:	60bb      	str	r3, [r7, #8]
   return(result);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f023 0310 	bic.w	r3, r3, #16
 8002448:	647b      	str	r3, [r7, #68]	; 0x44
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002452:	61ba      	str	r2, [r7, #24]
 8002454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002456:	6979      	ldr	r1, [r7, #20]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	e841 2300 	strex	r3, r2, [r1]
 800245e:	613b      	str	r3, [r7, #16]
   return(result);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e5      	bne.n	8002432 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002474:	bf00      	nop
 8002476:	3754      	adds	r7, #84	; 0x54
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f003 fba8 	bl	8005bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b21      	cmp	r3, #33	; 0x21
 80024ba:	d13e      	bne.n	800253a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c4:	d114      	bne.n	80024f0 <UART_Transmit_IT+0x48>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d110      	bne.n	80024f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	1c9a      	adds	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	621a      	str	r2, [r3, #32]
 80024ee:	e008      	b.n	8002502 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	1c59      	adds	r1, r3, #1
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6211      	str	r1, [r2, #32]
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29b      	uxth	r3, r3
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4619      	mov	r1, r3
 8002510:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002534:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
  }
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f003 fb27 	bl	8005bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b22      	cmp	r3, #34	; 0x22
 800258a:	f040 80ae 	bne.w	80026ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002596:	d117      	bne.n	80025c8 <UART_Receive_IT+0x50>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d113      	bne.n	80025c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	1c9a      	adds	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
 80025c6:	e026      	b.n	8002616 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025da:	d007      	beq.n	80025ec <UART_Receive_IT+0x74>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <UART_Receive_IT+0x82>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e008      	b.n	800260c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002606:	b2da      	uxtb	r2, r3
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29b      	uxth	r3, r3
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4619      	mov	r1, r3
 8002624:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002626:	2b00      	cmp	r3, #0
 8002628:	d15d      	bne.n	80026e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0220 	bic.w	r2, r2, #32
 8002638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	2b01      	cmp	r3, #1
 800266e:	d135      	bne.n	80026dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	e853 3f00 	ldrex	r3, [r3]
 8002684:	613b      	str	r3, [r7, #16]
   return(result);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f023 0310 	bic.w	r3, r3, #16
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002696:	623a      	str	r2, [r7, #32]
 8002698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	69f9      	ldr	r1, [r7, #28]
 800269c:	6a3a      	ldr	r2, [r7, #32]
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e5      	bne.n	8002676 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d10a      	bne.n	80026ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f003 fa7d 	bl	8005bd4 <HAL_UARTEx_RxEventCallback>
 80026da:	e002      	b.n	80026e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fdcf 	bl	8002280 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e002      	b.n	80026ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
  }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3730      	adds	r7, #48	; 0x30
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f8:	b0c0      	sub	sp, #256	; 0x100
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	ea40 0301 	orr.w	r3, r0, r1
 800271c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	431a      	orrs	r2, r3
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	431a      	orrs	r2, r3
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800274c:	f021 010c 	bic.w	r1, r1, #12
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800275a:	430b      	orrs	r3, r1
 800275c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276e:	6999      	ldr	r1, [r3, #24]
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	ea40 0301 	orr.w	r3, r0, r1
 800277a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b8f      	ldr	r3, [pc, #572]	; (80029c0 <UART_SetConfig+0x2cc>)
 8002784:	429a      	cmp	r2, r3
 8002786:	d005      	beq.n	8002794 <UART_SetConfig+0xa0>
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b8d      	ldr	r3, [pc, #564]	; (80029c4 <UART_SetConfig+0x2d0>)
 8002790:	429a      	cmp	r2, r3
 8002792:	d104      	bne.n	800279e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002794:	f7ff f960 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 8002798:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800279c:	e003      	b.n	80027a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800279e:	f7ff f947 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 80027a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b0:	f040 810c 	bne.w	80029cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b8:	2200      	movs	r2, #0
 80027ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027c6:	4622      	mov	r2, r4
 80027c8:	462b      	mov	r3, r5
 80027ca:	1891      	adds	r1, r2, r2
 80027cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80027ce:	415b      	adcs	r3, r3
 80027d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027d6:	4621      	mov	r1, r4
 80027d8:	eb12 0801 	adds.w	r8, r2, r1
 80027dc:	4629      	mov	r1, r5
 80027de:	eb43 0901 	adc.w	r9, r3, r1
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027f6:	4690      	mov	r8, r2
 80027f8:	4699      	mov	r9, r3
 80027fa:	4623      	mov	r3, r4
 80027fc:	eb18 0303 	adds.w	r3, r8, r3
 8002800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002804:	462b      	mov	r3, r5
 8002806:	eb49 0303 	adc.w	r3, r9, r3
 800280a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800281a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800281e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002822:	460b      	mov	r3, r1
 8002824:	18db      	adds	r3, r3, r3
 8002826:	653b      	str	r3, [r7, #80]	; 0x50
 8002828:	4613      	mov	r3, r2
 800282a:	eb42 0303 	adc.w	r3, r2, r3
 800282e:	657b      	str	r3, [r7, #84]	; 0x54
 8002830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002838:	f7fd fd2a 	bl	8000290 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4b61      	ldr	r3, [pc, #388]	; (80029c8 <UART_SetConfig+0x2d4>)
 8002842:	fba3 2302 	umull	r2, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	011c      	lsls	r4, r3, #4
 800284a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800284e:	2200      	movs	r2, #0
 8002850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002854:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800285c:	4642      	mov	r2, r8
 800285e:	464b      	mov	r3, r9
 8002860:	1891      	adds	r1, r2, r2
 8002862:	64b9      	str	r1, [r7, #72]	; 0x48
 8002864:	415b      	adcs	r3, r3
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800286c:	4641      	mov	r1, r8
 800286e:	eb12 0a01 	adds.w	sl, r2, r1
 8002872:	4649      	mov	r1, r9
 8002874:	eb43 0b01 	adc.w	fp, r3, r1
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800288c:	4692      	mov	sl, r2
 800288e:	469b      	mov	fp, r3
 8002890:	4643      	mov	r3, r8
 8002892:	eb1a 0303 	adds.w	r3, sl, r3
 8002896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800289a:	464b      	mov	r3, r9
 800289c:	eb4b 0303 	adc.w	r3, fp, r3
 80028a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028b8:	460b      	mov	r3, r1
 80028ba:	18db      	adds	r3, r3, r3
 80028bc:	643b      	str	r3, [r7, #64]	; 0x40
 80028be:	4613      	mov	r3, r2
 80028c0:	eb42 0303 	adc.w	r3, r2, r3
 80028c4:	647b      	str	r3, [r7, #68]	; 0x44
 80028c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028ce:	f7fd fcdf 	bl	8000290 <__aeabi_uldivmod>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <UART_SetConfig+0x2d4>)
 80028da:	fba3 2301 	umull	r2, r3, r3, r1
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2264      	movs	r2, #100	; 0x64
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	1acb      	subs	r3, r1, r3
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028ee:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <UART_SetConfig+0x2d4>)
 80028f0:	fba3 2302 	umull	r2, r3, r3, r2
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028fc:	441c      	add	r4, r3
 80028fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002902:	2200      	movs	r2, #0
 8002904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002908:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800290c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002910:	4642      	mov	r2, r8
 8002912:	464b      	mov	r3, r9
 8002914:	1891      	adds	r1, r2, r2
 8002916:	63b9      	str	r1, [r7, #56]	; 0x38
 8002918:	415b      	adcs	r3, r3
 800291a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800291c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002920:	4641      	mov	r1, r8
 8002922:	1851      	adds	r1, r2, r1
 8002924:	6339      	str	r1, [r7, #48]	; 0x30
 8002926:	4649      	mov	r1, r9
 8002928:	414b      	adcs	r3, r1
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002938:	4659      	mov	r1, fp
 800293a:	00cb      	lsls	r3, r1, #3
 800293c:	4651      	mov	r1, sl
 800293e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002942:	4651      	mov	r1, sl
 8002944:	00ca      	lsls	r2, r1, #3
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	4603      	mov	r3, r0
 800294c:	4642      	mov	r2, r8
 800294e:	189b      	adds	r3, r3, r2
 8002950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002954:	464b      	mov	r3, r9
 8002956:	460a      	mov	r2, r1
 8002958:	eb42 0303 	adc.w	r3, r2, r3
 800295c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800296c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002974:	460b      	mov	r3, r1
 8002976:	18db      	adds	r3, r3, r3
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
 800297a:	4613      	mov	r3, r2
 800297c:	eb42 0303 	adc.w	r3, r2, r3
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800298a:	f7fd fc81 	bl	8000290 <__aeabi_uldivmod>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <UART_SetConfig+0x2d4>)
 8002994:	fba3 1302 	umull	r1, r3, r3, r2
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	2164      	movs	r1, #100	; 0x64
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	3332      	adds	r3, #50	; 0x32
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <UART_SetConfig+0x2d4>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	f003 0207 	and.w	r2, r3, #7
 80029b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4422      	add	r2, r4
 80029ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029bc:	e106      	b.n	8002bcc <UART_SetConfig+0x4d8>
 80029be:	bf00      	nop
 80029c0:	40011000 	.word	0x40011000
 80029c4:	40011400 	.word	0x40011400
 80029c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029d0:	2200      	movs	r2, #0
 80029d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029de:	4642      	mov	r2, r8
 80029e0:	464b      	mov	r3, r9
 80029e2:	1891      	adds	r1, r2, r2
 80029e4:	6239      	str	r1, [r7, #32]
 80029e6:	415b      	adcs	r3, r3
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ee:	4641      	mov	r1, r8
 80029f0:	1854      	adds	r4, r2, r1
 80029f2:	4649      	mov	r1, r9
 80029f4:	eb43 0501 	adc.w	r5, r3, r1
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	00eb      	lsls	r3, r5, #3
 8002a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a06:	00e2      	lsls	r2, r4, #3
 8002a08:	4614      	mov	r4, r2
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	4643      	mov	r3, r8
 8002a0e:	18e3      	adds	r3, r4, r3
 8002a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a14:	464b      	mov	r3, r9
 8002a16:	eb45 0303 	adc.w	r3, r5, r3
 8002a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	008b      	lsls	r3, r1, #2
 8002a3e:	4621      	mov	r1, r4
 8002a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a44:	4621      	mov	r1, r4
 8002a46:	008a      	lsls	r2, r1, #2
 8002a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a4c:	f7fd fc20 	bl	8000290 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4b60      	ldr	r3, [pc, #384]	; (8002bd8 <UART_SetConfig+0x4e4>)
 8002a56:	fba3 2302 	umull	r2, r3, r3, r2
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	011c      	lsls	r4, r3, #4
 8002a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a70:	4642      	mov	r2, r8
 8002a72:	464b      	mov	r3, r9
 8002a74:	1891      	adds	r1, r2, r2
 8002a76:	61b9      	str	r1, [r7, #24]
 8002a78:	415b      	adcs	r3, r3
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a80:	4641      	mov	r1, r8
 8002a82:	1851      	adds	r1, r2, r1
 8002a84:	6139      	str	r1, [r7, #16]
 8002a86:	4649      	mov	r1, r9
 8002a88:	414b      	adcs	r3, r1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a98:	4659      	mov	r1, fp
 8002a9a:	00cb      	lsls	r3, r1, #3
 8002a9c:	4651      	mov	r1, sl
 8002a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aa2:	4651      	mov	r1, sl
 8002aa4:	00ca      	lsls	r2, r1, #3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4642      	mov	r2, r8
 8002aae:	189b      	adds	r3, r3, r2
 8002ab0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ab4:	464b      	mov	r3, r9
 8002ab6:	460a      	mov	r2, r1
 8002ab8:	eb42 0303 	adc.w	r3, r2, r3
 8002abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ad8:	4649      	mov	r1, r9
 8002ada:	008b      	lsls	r3, r1, #2
 8002adc:	4641      	mov	r1, r8
 8002ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	008a      	lsls	r2, r1, #2
 8002ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002aea:	f7fd fbd1 	bl	8000290 <__aeabi_uldivmod>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <UART_SetConfig+0x4e4>)
 8002af6:	fba3 2301 	umull	r2, r3, r3, r1
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2264      	movs	r2, #100	; 0x64
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	1acb      	subs	r3, r1, r3
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	3332      	adds	r3, #50	; 0x32
 8002b08:	4a33      	ldr	r2, [pc, #204]	; (8002bd8 <UART_SetConfig+0x4e4>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b14:	441c      	add	r4, r3
 8002b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	673b      	str	r3, [r7, #112]	; 0x70
 8002b1e:	677a      	str	r2, [r7, #116]	; 0x74
 8002b20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b24:	4642      	mov	r2, r8
 8002b26:	464b      	mov	r3, r9
 8002b28:	1891      	adds	r1, r2, r2
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	415b      	adcs	r3, r3
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b34:	4641      	mov	r1, r8
 8002b36:	1851      	adds	r1, r2, r1
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	414b      	adcs	r3, r1
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b4c:	4659      	mov	r1, fp
 8002b4e:	00cb      	lsls	r3, r1, #3
 8002b50:	4651      	mov	r1, sl
 8002b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b56:	4651      	mov	r1, sl
 8002b58:	00ca      	lsls	r2, r1, #3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4642      	mov	r2, r8
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b66:	464b      	mov	r3, r9
 8002b68:	460a      	mov	r2, r1
 8002b6a:	eb42 0303 	adc.w	r3, r2, r3
 8002b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	663b      	str	r3, [r7, #96]	; 0x60
 8002b7a:	667a      	str	r2, [r7, #100]	; 0x64
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b88:	4649      	mov	r1, r9
 8002b8a:	008b      	lsls	r3, r1, #2
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b92:	4641      	mov	r1, r8
 8002b94:	008a      	lsls	r2, r1, #2
 8002b96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b9a:	f7fd fb79 	bl	8000290 <__aeabi_uldivmod>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <UART_SetConfig+0x4e4>)
 8002ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	2164      	movs	r1, #100	; 0x64
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	3332      	adds	r3, #50	; 0x32
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <UART_SetConfig+0x4e4>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	f003 020f 	and.w	r2, r3, #15
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4422      	add	r2, r4
 8002bca:	609a      	str	r2, [r3, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd8:	51eb851f 	.word	0x51eb851f

08002bdc <__NVIC_SetPriority>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db0a      	blt.n	8002c06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <__NVIC_SetPriority+0x4c>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c04:	e00a      	b.n	8002c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4908      	ldr	r1, [pc, #32]	; (8002c2c <__NVIC_SetPriority+0x50>)
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3b04      	subs	r3, #4
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	440b      	add	r3, r1
 8002c1a:	761a      	strb	r2, [r3, #24]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000e100 	.word	0xe000e100
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c34:	2100      	movs	r1, #0
 8002c36:	f06f 0004 	mvn.w	r0, #4
 8002c3a:	f7ff ffcf 	bl	8002bdc <__NVIC_SetPriority>
#endif
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c4a:	f3ef 8305 	mrs	r3, IPSR
 8002c4e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c56:	f06f 0305 	mvn.w	r3, #5
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	e00c      	b.n	8002c78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <osKernelInitialize+0x44>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <osKernelInitialize+0x44>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	e002      	b.n	8002c78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c78:	687b      	ldr	r3, [r7, #4]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	200000d8 	.word	0x200000d8

08002c8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c92:	f3ef 8305 	mrs	r3, IPSR
 8002c96:	603b      	str	r3, [r7, #0]
  return(result);
 8002c98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c9e:	f06f 0305 	mvn.w	r3, #5
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	e010      	b.n	8002cc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <osKernelStart+0x48>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d109      	bne.n	8002cc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002cae:	f7ff ffbf 	bl	8002c30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <osKernelStart+0x48>)
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002cb8:	f001 f866 	bl	8003d88 <vTaskStartScheduler>
      stat = osOK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	e002      	b.n	8002cc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002cc8:	687b      	ldr	r3, [r7, #4]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200000d8 	.word	0x200000d8

08002cd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af04      	add	r7, sp, #16
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ce8:	f3ef 8305 	mrs	r3, IPSR
 8002cec:	617b      	str	r3, [r7, #20]
  return(result);
 8002cee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d17e      	bne.n	8002df2 <osThreadNew+0x11a>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d07b      	beq.n	8002df2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002cfe:	2318      	movs	r3, #24
 8002d00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d045      	beq.n	8002d9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <osThreadNew+0x48>
        name = attr->name;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <osThreadNew+0x6e>
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2b38      	cmp	r3, #56	; 0x38
 8002d38:	d805      	bhi.n	8002d46 <osThreadNew+0x6e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <osThreadNew+0x72>
        return (NULL);
 8002d46:	2300      	movs	r3, #0
 8002d48:	e054      	b.n	8002df4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00e      	beq.n	8002d80 <osThreadNew+0xa8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b5b      	cmp	r3, #91	; 0x5b
 8002d68:	d90a      	bls.n	8002d80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <osThreadNew+0xa8>
        mem = 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	e010      	b.n	8002da2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10c      	bne.n	8002da2 <osThreadNew+0xca>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d108      	bne.n	8002da2 <osThreadNew+0xca>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <osThreadNew+0xca>
          mem = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e001      	b.n	8002da2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d110      	bne.n	8002dca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002db0:	9202      	str	r2, [sp, #8]
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6a3a      	ldr	r2, [r7, #32]
 8002dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fe0c 	bl	80039dc <xTaskCreateStatic>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	e013      	b.n	8002df2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d110      	bne.n	8002df2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fe57 	bl	8003a96 <xTaskCreate>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <osThreadNew+0x11a>
            hTask = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002df2:	693b      	ldr	r3, [r7, #16]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3728      	adds	r7, #40	; 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e04:	f3ef 8305 	mrs	r3, IPSR
 8002e08:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <osDelay+0x1c>
    stat = osErrorISR;
 8002e10:	f06f 0305 	mvn.w	r3, #5
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e007      	b.n	8002e28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 ff7c 	bl	8003d20 <vTaskDelay>
    }
  }

  return (stat);
 8002e28:	68fb      	ldr	r3, [r7, #12]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a07      	ldr	r2, [pc, #28]	; (8002e60 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <vApplicationGetIdleTaskMemory+0x30>)
 8002e4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2280      	movs	r2, #128	; 0x80
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	200000dc 	.word	0x200000dc
 8002e64:	20000138 	.word	0x20000138

08002e68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <vApplicationGetTimerTaskMemory+0x30>)
 8002e7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	20000338 	.word	0x20000338
 8002e98:	20000394 	.word	0x20000394

08002e9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f103 0208 	add.w	r2, r3, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f103 0208 	add.w	r2, r3, #8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f103 0208 	add.w	r2, r3, #8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	601a      	str	r2, [r3, #0]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d103      	bne.n	8002f5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e00c      	b.n	8002f78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3308      	adds	r3, #8
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e002      	b.n	8002f6c <vListInsert+0x2e>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d2f6      	bcs.n	8002f66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	601a      	str	r2, [r3, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6892      	ldr	r2, [r2, #8]
 8002fc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6852      	ldr	r2, [r2, #4]
 8002fd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d103      	bne.n	8002fe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800302a:	bf00      	nop
 800302c:	e7fe      	b.n	800302c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800302e:	f002 f851 	bl	80050d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	68f9      	ldr	r1, [r7, #12]
 800303c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	441a      	add	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	3b01      	subs	r3, #1
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	441a      	add	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22ff      	movs	r2, #255	; 0xff
 800307a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d114      	bne.n	80030ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01a      	beq.n	80030c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3310      	adds	r3, #16
 8003090:	4618      	mov	r0, r3
 8003092:	f001 f903 	bl	800429c <xTaskRemoveFromEventList>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d012      	beq.n	80030c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <xQueueGenericReset+0xcc>)
 800309e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	e009      	b.n	80030c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3310      	adds	r3, #16
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fef2 	bl	8002e9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3324      	adds	r3, #36	; 0x24
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff feed 	bl	8002e9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030c2:	f002 f837 	bl	8005134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	e000ed04 	.word	0xe000ed04

080030d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08e      	sub	sp, #56	; 0x38
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <xQueueGenericCreateStatic+0x52>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <xQueueGenericCreateStatic+0x56>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <xQueueGenericCreateStatic+0x58>
 800312a:	2300      	movs	r3, #0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	623b      	str	r3, [r7, #32]
}
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <xQueueGenericCreateStatic+0x7e>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <xQueueGenericCreateStatic+0x82>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <xQueueGenericCreateStatic+0x84>
 8003156:	2300      	movs	r3, #0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	61fb      	str	r3, [r7, #28]
}
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003172:	2350      	movs	r3, #80	; 0x50
 8003174:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b50      	cmp	r3, #80	; 0x50
 800317a:	d00a      	beq.n	8003192 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	61bb      	str	r3, [r7, #24]
}
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003192:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f805 	bl	80031c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80031bc:	4618      	mov	r0, r3
 80031be:	3730      	adds	r7, #48	; 0x30
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d103      	bne.n	80031e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e002      	b.n	80031e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031f2:	2101      	movs	r1, #1
 80031f4:	69b8      	ldr	r0, [r7, #24]
 80031f6:	f7ff ff05 	bl	8003004 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08e      	sub	sp, #56	; 0x38
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800321a:	2300      	movs	r3, #0
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <xQueueGenericSend+0x32>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <xQueueGenericSend+0x40>
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <xQueueGenericSend+0x44>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <xQueueGenericSend+0x46>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <xQueueGenericSend+0x60>
	__asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003268:	bf00      	nop
 800326a:	e7fe      	b.n	800326a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d103      	bne.n	800327a <xQueueGenericSend+0x6e>
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <xQueueGenericSend+0x72>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <xQueueGenericSend+0x74>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <xQueueGenericSend+0x8e>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	623b      	str	r3, [r7, #32]
}
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800329a:	f001 f9bd 	bl	8004618 <xTaskGetSchedulerState>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <xQueueGenericSend+0x9e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <xQueueGenericSend+0xa2>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <xQueueGenericSend+0xa4>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <xQueueGenericSend+0xbe>
	__asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	61fb      	str	r3, [r7, #28]
}
 80032c6:	bf00      	nop
 80032c8:	e7fe      	b.n	80032c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032ca:	f001 ff03 	bl	80050d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d302      	bcc.n	80032e0 <xQueueGenericSend+0xd4>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d129      	bne.n	8003334 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032e6:	f000 fa0b 	bl	8003700 <prvCopyDataToQueue>
 80032ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	3324      	adds	r3, #36	; 0x24
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 ffcf 	bl	800429c <xTaskRemoveFromEventList>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003304:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <xQueueGenericSend+0x1f8>)
 8003306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	e00a      	b.n	800332c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800331c:	4b39      	ldr	r3, [pc, #228]	; (8003404 <xQueueGenericSend+0x1f8>)
 800331e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800332c:	f001 ff02 	bl	8005134 <vPortExitCritical>
				return pdPASS;
 8003330:	2301      	movs	r3, #1
 8003332:	e063      	b.n	80033fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800333a:	f001 fefb 	bl	8005134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800333e:	2300      	movs	r3, #0
 8003340:	e05c      	b.n	80033fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	4618      	mov	r0, r3
 800334e:	f001 f809 	bl	8004364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003352:	2301      	movs	r3, #1
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003356:	f001 feed 	bl	8005134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800335a:	f000 fd7b 	bl	8003e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800335e:	f001 feb9 	bl	80050d4 <vPortEnterCritical>
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003368:	b25b      	sxtb	r3, r3
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d103      	bne.n	8003378 <xQueueGenericSend+0x16c>
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800337e:	b25b      	sxtb	r3, r3
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d103      	bne.n	800338e <xQueueGenericSend+0x182>
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800338e:	f001 fed1 	bl	8005134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003392:	1d3a      	adds	r2, r7, #4
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fff8 	bl	8004390 <xTaskCheckForTimeOut>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d124      	bne.n	80033f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033a8:	f000 faa2 	bl	80038f0 <prvIsQueueFull>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d018      	beq.n	80033e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	3310      	adds	r3, #16
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 ff1e 	bl	80041fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033c2:	f000 fa2d 	bl	8003820 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033c6:	f000 fd53 	bl	8003e70 <xTaskResumeAll>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f47f af7c 	bne.w	80032ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <xQueueGenericSend+0x1f8>)
 80033d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	e772      	b.n	80032ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033e6:	f000 fa1b 	bl	8003820 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033ea:	f000 fd41 	bl	8003e70 <xTaskResumeAll>
 80033ee:	e76c      	b.n	80032ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033f2:	f000 fa15 	bl	8003820 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033f6:	f000 fd3b 	bl	8003e70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3738      	adds	r7, #56	; 0x38
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b090      	sub	sp, #64	; 0x40
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d103      	bne.n	8003444 <xQueueGenericSendFromISR+0x3c>
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <xQueueGenericSendFromISR+0x40>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <xQueueGenericSendFromISR+0x42>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003460:	bf00      	nop
 8003462:	e7fe      	b.n	8003462 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d103      	bne.n	8003472 <xQueueGenericSendFromISR+0x6a>
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <xQueueGenericSendFromISR+0x6e>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <xQueueGenericSendFromISR+0x70>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	623b      	str	r3, [r7, #32]
}
 800348e:	bf00      	nop
 8003490:	e7fe      	b.n	8003490 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003492:	f001 ff01 	bl	8005298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003496:	f3ef 8211 	mrs	r2, BASEPRI
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	61fa      	str	r2, [r7, #28]
 80034ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <xQueueGenericSendFromISR+0xbc>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d12f      	bne.n	8003524 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034da:	f000 f911 	bl	8003700 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d112      	bne.n	800350e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f2:	3324      	adds	r3, #36	; 0x24
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fed1 	bl	800429c <xTaskRemoveFromEventList>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e007      	b.n	800351e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800350e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003512:	3301      	adds	r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	b25a      	sxtb	r2, r3
 8003518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800351e:	2301      	movs	r3, #1
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003522:	e001      	b.n	8003528 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003524:	2300      	movs	r3, #0
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003532:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003536:	4618      	mov	r0, r3
 8003538:	3740      	adds	r7, #64	; 0x40
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	; 0x30
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800354c:	2300      	movs	r3, #0
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <xQueueReceive+0x30>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	623b      	str	r3, [r7, #32]
}
 800356c:	bf00      	nop
 800356e:	e7fe      	b.n	800356e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <xQueueReceive+0x3e>
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <xQueueReceive+0x42>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <xQueueReceive+0x44>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <xQueueReceive+0x5e>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	61fb      	str	r3, [r7, #28]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800359e:	f001 f83b 	bl	8004618 <xTaskGetSchedulerState>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <xQueueReceive+0x6e>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <xQueueReceive+0x72>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <xQueueReceive+0x74>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xQueueReceive+0x8e>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	61bb      	str	r3, [r7, #24]
}
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035ce:	f001 fd81 	bl	80050d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01f      	beq.n	800361e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e2:	f000 f8f7 	bl	80037d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00f      	beq.n	8003616 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	3310      	adds	r3, #16
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fe4e 	bl	800429c <xTaskRemoveFromEventList>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <xQueueReceive+0x1bc>)
 8003608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003616:	f001 fd8d 	bl	8005134 <vPortExitCritical>
				return pdPASS;
 800361a:	2301      	movs	r3, #1
 800361c:	e069      	b.n	80036f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003624:	f001 fd86 	bl	8005134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003628:	2300      	movs	r3, #0
 800362a:	e062      	b.n	80036f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003632:	f107 0310 	add.w	r3, r7, #16
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fe94 	bl	8004364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800363c:	2301      	movs	r3, #1
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003640:	f001 fd78 	bl	8005134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003644:	f000 fc06 	bl	8003e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003648:	f001 fd44 	bl	80050d4 <vPortEnterCritical>
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003652:	b25b      	sxtb	r3, r3
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d103      	bne.n	8003662 <xQueueReceive+0x122>
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003668:	b25b      	sxtb	r3, r3
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d103      	bne.n	8003678 <xQueueReceive+0x138>
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003678:	f001 fd5c 	bl	8005134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800367c:	1d3a      	adds	r2, r7, #4
 800367e:	f107 0310 	add.w	r3, r7, #16
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fe83 	bl	8004390 <xTaskCheckForTimeOut>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d123      	bne.n	80036d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003692:	f000 f917 	bl	80038c4 <prvIsQueueEmpty>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d017      	beq.n	80036cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	3324      	adds	r3, #36	; 0x24
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fda9 	bl	80041fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ac:	f000 f8b8 	bl	8003820 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036b0:	f000 fbde 	bl	8003e70 <xTaskResumeAll>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d189      	bne.n	80035ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <xQueueReceive+0x1bc>)
 80036bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	e780      	b.n	80035ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ce:	f000 f8a7 	bl	8003820 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036d2:	f000 fbcd 	bl	8003e70 <xTaskResumeAll>
 80036d6:	e77a      	b.n	80035ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036da:	f000 f8a1 	bl	8003820 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036de:	f000 fbc7 	bl	8003e70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e4:	f000 f8ee 	bl	80038c4 <prvIsQueueEmpty>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f43f af6f 	beq.w	80035ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3730      	adds	r7, #48	; 0x30
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	e000ed04 	.word	0xe000ed04

08003700 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10d      	bne.n	800373a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d14d      	bne.n	80037c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 ff92 	bl	8004654 <xTaskPriorityDisinherit>
 8003730:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	e043      	b.n	80037c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d119      	bne.n	8003774 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6858      	ldr	r0, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	461a      	mov	r2, r3
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	f002 fd91 	bl	8006272 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	441a      	add	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	d32b      	bcc.n	80037c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	e026      	b.n	80037c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68d8      	ldr	r0, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	461a      	mov	r2, r3
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	f002 fd77 	bl	8006272 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	425b      	negs	r3, r3
 800378e:	441a      	add	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d207      	bcs.n	80037b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	425b      	negs	r3, r3
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d105      	bne.n	80037c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3b01      	subs	r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037ca:	697b      	ldr	r3, [r7, #20]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	441a      	add	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d303      	bcc.n	8003808 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68d9      	ldr	r1, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	461a      	mov	r2, r3
 8003812:	6838      	ldr	r0, [r7, #0]
 8003814:	f002 fd2d 	bl	8006272 <memcpy>
	}
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003828:	f001 fc54 	bl	80050d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003832:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003834:	e011      	b.n	800385a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	d012      	beq.n	8003864 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3324      	adds	r3, #36	; 0x24
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fd2a 	bl	800429c <xTaskRemoveFromEventList>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800384e:	f000 fe01 	bl	8004454 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	3b01      	subs	r3, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800385a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	dce9      	bgt.n	8003836 <prvUnlockQueue+0x16>
 8003862:	e000      	b.n	8003866 <prvUnlockQueue+0x46>
					break;
 8003864:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800386e:	f001 fc61 	bl	8005134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003872:	f001 fc2f 	bl	80050d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800387c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800387e:	e011      	b.n	80038a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3310      	adds	r3, #16
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fd05 	bl	800429c <xTaskRemoveFromEventList>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003898:	f000 fddc 	bl	8004454 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800389c:	7bbb      	ldrb	r3, [r7, #14]
 800389e:	3b01      	subs	r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	dce9      	bgt.n	8003880 <prvUnlockQueue+0x60>
 80038ac:	e000      	b.n	80038b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	22ff      	movs	r2, #255	; 0xff
 80038b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038b8:	f001 fc3c 	bl	8005134 <vPortExitCritical>
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038cc:	f001 fc02 	bl	80050d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e001      	b.n	80038e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038e2:	f001 fc27 	bl	8005134 <vPortExitCritical>

	return xReturn;
 80038e6:	68fb      	ldr	r3, [r7, #12]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038f8:	f001 fbec 	bl	80050d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003904:	429a      	cmp	r2, r3
 8003906:	d102      	bne.n	800390e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e001      	b.n	8003912 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003912:	f001 fc0f 	bl	8005134 <vPortExitCritical>

	return xReturn;
 8003916:	68fb      	ldr	r3, [r7, #12]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e014      	b.n	800395a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003930:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <vQueueAddToRegistry+0x50>)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10b      	bne.n	8003954 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <vQueueAddToRegistry+0x50>)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <vQueueAddToRegistry+0x50>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003952:	e006      	b.n	8003962 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b07      	cmp	r3, #7
 800395e:	d9e7      	bls.n	8003930 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000794 	.word	0x20000794

08003974 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003984:	f001 fba6 	bl	80050d4 <vPortEnterCritical>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800398e:	b25b      	sxtb	r3, r3
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d103      	bne.n	800399e <vQueueWaitForMessageRestricted+0x2a>
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039a4:	b25b      	sxtb	r3, r3
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039aa:	d103      	bne.n	80039b4 <vQueueWaitForMessageRestricted+0x40>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039b4:	f001 fbbe 	bl	8005134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d106      	bne.n	80039ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3324      	adds	r3, #36	; 0x24
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fc3b 	bl	8004244 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039ce:	6978      	ldr	r0, [r7, #20]
 80039d0:	f7ff ff26 	bl	8003820 <prvUnlockQueue>
	}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af04      	add	r7, sp, #16
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xTaskCreateStatic+0x2a>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	623b      	str	r3, [r7, #32]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	61fb      	str	r3, [r7, #28]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a22:	235c      	movs	r3, #92	; 0x5c
 8003a24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b5c      	cmp	r3, #92	; 0x5c
 8003a2a:	d00a      	beq.n	8003a42 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	61bb      	str	r3, [r7, #24]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01e      	beq.n	8003a88 <xTaskCreateStatic+0xac>
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a62:	2300      	movs	r3, #0
 8003a64:	9303      	str	r3, [sp, #12]
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	9302      	str	r3, [sp, #8]
 8003a6a:	f107 0314 	add.w	r3, r7, #20
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f850 	bl	8003b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a82:	f000 f8dd 	bl	8003c40 <prvAddNewTaskToReadyList>
 8003a86:	e001      	b.n	8003a8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a8c:	697b      	ldr	r3, [r7, #20]
	}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3728      	adds	r7, #40	; 0x28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b08c      	sub	sp, #48	; 0x30
 8003a9a:	af04      	add	r7, sp, #16
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 fc34 	bl	8005318 <pvPortMalloc>
 8003ab0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ab8:	205c      	movs	r0, #92	; 0x5c
 8003aba:	f001 fc2d 	bl	8005318 <pvPortMalloc>
 8003abe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
 8003acc:	e005      	b.n	8003ada <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ace:	6978      	ldr	r0, [r7, #20]
 8003ad0:	f001 fcee 	bl	80054b0 <vPortFree>
 8003ad4:	e001      	b.n	8003ada <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9303      	str	r3, [sp, #12]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	9302      	str	r3, [sp, #8]
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f80e 	bl	8003b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b04:	69f8      	ldr	r0, [r7, #28]
 8003b06:	f000 f89b 	bl	8003c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e002      	b.n	8003b16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
 8003b14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b16:	69bb      	ldr	r3, [r7, #24]
	}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	461a      	mov	r2, r3
 8003b38:	21a5      	movs	r1, #165	; 0xa5
 8003b3a:	f002 fb0d 	bl	8006158 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f023 0307 	bic.w	r3, r3, #7
 8003b56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	617b      	str	r3, [r7, #20]
}
 8003b74:	bf00      	nop
 8003b76:	e7fe      	b.n	8003b76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01f      	beq.n	8003bbe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e012      	b.n	8003baa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	7819      	ldrb	r1, [r3, #0]
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	3334      	adds	r3, #52	; 0x34
 8003b94:	460a      	mov	r2, r1
 8003b96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d006      	beq.n	8003bb2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d9e9      	bls.n	8003b84 <prvInitialiseNewTask+0x64>
 8003bb0:	e000      	b.n	8003bb4 <prvInitialiseNewTask+0x94>
			{
				break;
 8003bb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bbc:	e003      	b.n	8003bc6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	2b37      	cmp	r3, #55	; 0x37
 8003bca:	d901      	bls.n	8003bd0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bcc:	2337      	movs	r3, #55	; 0x37
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	2200      	movs	r2, #0
 8003be0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	3304      	adds	r3, #4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff f978 	bl	8002edc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	3318      	adds	r3, #24
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff f973 	bl	8002edc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	2200      	movs	r2, #0
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	69b8      	ldr	r0, [r7, #24]
 8003c20:	f001 f928 	bl	8004e74 <pxPortInitialiseStack>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c36:	bf00      	nop
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c48:	f001 fa44 	bl	80050d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c4c:	4b2d      	ldr	r3, [pc, #180]	; (8003d04 <prvAddNewTaskToReadyList+0xc4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a2c      	ldr	r2, [pc, #176]	; (8003d04 <prvAddNewTaskToReadyList+0xc4>)
 8003c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c56:	4b2c      	ldr	r3, [pc, #176]	; (8003d08 <prvAddNewTaskToReadyList+0xc8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c5e:	4a2a      	ldr	r2, [pc, #168]	; (8003d08 <prvAddNewTaskToReadyList+0xc8>)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <prvAddNewTaskToReadyList+0xc4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d110      	bne.n	8003c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c6c:	f000 fc16 	bl	800449c <prvInitialiseTaskLists>
 8003c70:	e00d      	b.n	8003c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c72:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <prvAddNewTaskToReadyList+0xcc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c7a:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <prvAddNewTaskToReadyList+0xc8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d802      	bhi.n	8003c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c88:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <prvAddNewTaskToReadyList+0xc8>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c8e:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <prvAddNewTaskToReadyList+0xd0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3301      	adds	r3, #1
 8003c94:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <prvAddNewTaskToReadyList+0xd0>)
 8003c96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <prvAddNewTaskToReadyList+0xd0>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <prvAddNewTaskToReadyList+0xd4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d903      	bls.n	8003cb4 <prvAddNewTaskToReadyList+0x74>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <prvAddNewTaskToReadyList+0xd4>)
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <prvAddNewTaskToReadyList+0xd8>)
 8003cc2:	441a      	add	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f7ff f913 	bl	8002ef6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cd0:	f001 fa30 	bl	8005134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <prvAddNewTaskToReadyList+0xcc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <prvAddNewTaskToReadyList+0xc8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d207      	bcs.n	8003cfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <prvAddNewTaskToReadyList+0xdc>)
 8003cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000ca8 	.word	0x20000ca8
 8003d08:	200007d4 	.word	0x200007d4
 8003d0c:	20000cb4 	.word	0x20000cb4
 8003d10:	20000cc4 	.word	0x20000cc4
 8003d14:	20000cb0 	.word	0x20000cb0
 8003d18:	200007d8 	.word	0x200007d8
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d017      	beq.n	8003d62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <vTaskDelay+0x60>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <vTaskDelay+0x30>
	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	60bb      	str	r3, [r7, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	e7fe      	b.n	8003d4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d50:	f000 f880 	bl	8003e54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d54:	2100      	movs	r1, #0
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fcea 	bl	8004730 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d5c:	f000 f888 	bl	8003e70 <xTaskResumeAll>
 8003d60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <vTaskDelay+0x64>)
 8003d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000cd0 	.word	0x20000cd0
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d96:	463a      	mov	r2, r7
 8003d98:	1d39      	adds	r1, r7, #4
 8003d9a:	f107 0308 	add.w	r3, r7, #8
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff f848 	bl	8002e34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	9202      	str	r2, [sp, #8]
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	2300      	movs	r3, #0
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	460a      	mov	r2, r1
 8003db6:	4921      	ldr	r1, [pc, #132]	; (8003e3c <vTaskStartScheduler+0xb4>)
 8003db8:	4821      	ldr	r0, [pc, #132]	; (8003e40 <vTaskStartScheduler+0xb8>)
 8003dba:	f7ff fe0f 	bl	80039dc <xTaskCreateStatic>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <vTaskStartScheduler+0xbc>)
 8003dc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <vTaskStartScheduler+0xbc>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e001      	b.n	8003dd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d102      	bne.n	8003de2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ddc:	f000 fcfc 	bl	80047d8 <xTimerCreateTimerTask>
 8003de0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d116      	bne.n	8003e16 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	613b      	str	r3, [r7, #16]
}
 8003dfa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <vTaskStartScheduler+0xc0>)
 8003dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003e02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <vTaskStartScheduler+0xc4>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <vTaskStartScheduler+0xc8>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e10:	f001 f8be 	bl	8004f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e14:	e00e      	b.n	8003e34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d10a      	bne.n	8003e34 <vTaskStartScheduler+0xac>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	60fb      	str	r3, [r7, #12]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <vTaskStartScheduler+0xaa>
}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	08006cc4 	.word	0x08006cc4
 8003e40:	0800446d 	.word	0x0800446d
 8003e44:	20000ccc 	.word	0x20000ccc
 8003e48:	20000cc8 	.word	0x20000cc8
 8003e4c:	20000cb4 	.word	0x20000cb4
 8003e50:	20000cac 	.word	0x20000cac

08003e54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <vTaskSuspendAll+0x18>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	4a03      	ldr	r2, [pc, #12]	; (8003e6c <vTaskSuspendAll+0x18>)
 8003e60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	20000cd0 	.word	0x20000cd0

08003e70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e7e:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <xTaskResumeAll+0x118>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <xTaskResumeAll+0x2c>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	603b      	str	r3, [r7, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e9c:	f001 f91a 	bl	80050d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ea0:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <xTaskResumeAll+0x118>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	4a38      	ldr	r2, [pc, #224]	; (8003f88 <xTaskResumeAll+0x118>)
 8003ea8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eaa:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <xTaskResumeAll+0x118>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d162      	bne.n	8003f78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003eb2:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <xTaskResumeAll+0x11c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d05e      	beq.n	8003f78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eba:	e02f      	b.n	8003f1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ebc:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <xTaskResumeAll+0x120>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3318      	adds	r3, #24
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff f871 	bl	8002fb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff f86c 	bl	8002fb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <xTaskResumeAll+0x124>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d903      	bls.n	8003eec <xTaskResumeAll+0x7c>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <xTaskResumeAll+0x124>)
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <xTaskResumeAll+0x128>)
 8003efa:	441a      	add	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f7fe fff7 	bl	8002ef6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <xTaskResumeAll+0x12c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <xTaskResumeAll+0x130>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f1c:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <xTaskResumeAll+0x120>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1cb      	bne.n	8003ebc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f2a:	f000 fb55 	bl	80045d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <xTaskResumeAll+0x134>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f3a:	f000 f847 	bl	8003fcc <xTaskIncrementTick>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <xTaskResumeAll+0x130>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f1      	bne.n	8003f3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <xTaskResumeAll+0x134>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <xTaskResumeAll+0x130>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <xTaskResumeAll+0x138>)
 8003f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f78:	f001 f8dc 	bl	8005134 <vPortExitCritical>

	return xAlreadyYielded;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000cd0 	.word	0x20000cd0
 8003f8c:	20000ca8 	.word	0x20000ca8
 8003f90:	20000c68 	.word	0x20000c68
 8003f94:	20000cb0 	.word	0x20000cb0
 8003f98:	200007d8 	.word	0x200007d8
 8003f9c:	200007d4 	.word	0x200007d4
 8003fa0:	20000cbc 	.word	0x20000cbc
 8003fa4:	20000cb8 	.word	0x20000cb8
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <xTaskGetTickCount+0x1c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003fb8:	687b      	ldr	r3, [r7, #4]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000cac 	.word	0x20000cac

08003fcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fd6:	4b4f      	ldr	r3, [pc, #316]	; (8004114 <xTaskIncrementTick+0x148>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 808f 	bne.w	80040fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fe0:	4b4d      	ldr	r3, [pc, #308]	; (8004118 <xTaskIncrementTick+0x14c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fe8:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <xTaskIncrementTick+0x14c>)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d120      	bne.n	8004036 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ff4:	4b49      	ldr	r3, [pc, #292]	; (800411c <xTaskIncrementTick+0x150>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	603b      	str	r3, [r7, #0]
}
 8004010:	bf00      	nop
 8004012:	e7fe      	b.n	8004012 <xTaskIncrementTick+0x46>
 8004014:	4b41      	ldr	r3, [pc, #260]	; (800411c <xTaskIncrementTick+0x150>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <xTaskIncrementTick+0x154>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a3f      	ldr	r2, [pc, #252]	; (800411c <xTaskIncrementTick+0x150>)
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4a3f      	ldr	r2, [pc, #252]	; (8004120 <xTaskIncrementTick+0x154>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <xTaskIncrementTick+0x158>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	4a3d      	ldr	r2, [pc, #244]	; (8004124 <xTaskIncrementTick+0x158>)
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	f000 fad1 	bl	80045d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004036:	4b3c      	ldr	r3, [pc, #240]	; (8004128 <xTaskIncrementTick+0x15c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	429a      	cmp	r2, r3
 800403e:	d349      	bcc.n	80040d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <xTaskIncrementTick+0x150>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800404a:	4b37      	ldr	r3, [pc, #220]	; (8004128 <xTaskIncrementTick+0x15c>)
 800404c:	f04f 32ff 	mov.w	r2, #4294967295
 8004050:	601a      	str	r2, [r3, #0]
					break;
 8004052:	e03f      	b.n	80040d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004054:	4b31      	ldr	r3, [pc, #196]	; (800411c <xTaskIncrementTick+0x150>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	d203      	bcs.n	8004074 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800406c:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <xTaskIncrementTick+0x15c>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004072:	e02f      	b.n	80040d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	3304      	adds	r3, #4
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe ff99 	bl	8002fb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3318      	adds	r3, #24
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe ff90 	bl	8002fb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b25      	ldr	r3, [pc, #148]	; (800412c <xTaskIncrementTick+0x160>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d903      	bls.n	80040a4 <xTaskIncrementTick+0xd8>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a22      	ldr	r2, [pc, #136]	; (800412c <xTaskIncrementTick+0x160>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <xTaskIncrementTick+0x164>)
 80040b2:	441a      	add	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7fe ff1b 	bl	8002ef6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <xTaskIncrementTick+0x168>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3b8      	bcc.n	8004040 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040ce:	2301      	movs	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040d2:	e7b5      	b.n	8004040 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <xTaskIncrementTick+0x168>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	4915      	ldr	r1, [pc, #84]	; (8004130 <xTaskIncrementTick+0x164>)
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d901      	bls.n	80040f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <xTaskIncrementTick+0x16c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e004      	b.n	8004108 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <xTaskIncrementTick+0x170>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <xTaskIncrementTick+0x170>)
 8004106:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004108:	697b      	ldr	r3, [r7, #20]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000cd0 	.word	0x20000cd0
 8004118:	20000cac 	.word	0x20000cac
 800411c:	20000c60 	.word	0x20000c60
 8004120:	20000c64 	.word	0x20000c64
 8004124:	20000cc0 	.word	0x20000cc0
 8004128:	20000cc8 	.word	0x20000cc8
 800412c:	20000cb0 	.word	0x20000cb0
 8004130:	200007d8 	.word	0x200007d8
 8004134:	200007d4 	.word	0x200007d4
 8004138:	20000cbc 	.word	0x20000cbc
 800413c:	20000cb8 	.word	0x20000cb8

08004140 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004146:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <vTaskSwitchContext+0xa8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800414e:	4b27      	ldr	r3, [pc, #156]	; (80041ec <vTaskSwitchContext+0xac>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004154:	e041      	b.n	80041da <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004156:	4b25      	ldr	r3, [pc, #148]	; (80041ec <vTaskSwitchContext+0xac>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415c:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <vTaskSwitchContext+0xb0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e010      	b.n	8004186 <vTaskSwitchContext+0x46>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <vTaskSwitchContext+0x40>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	607b      	str	r3, [r7, #4]
}
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <vTaskSwitchContext+0x3e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3b01      	subs	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	491b      	ldr	r1, [pc, #108]	; (80041f4 <vTaskSwitchContext+0xb4>)
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0e4      	beq.n	8004164 <vTaskSwitchContext+0x24>
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <vTaskSwitchContext+0xb4>)
 80041a6:	4413      	add	r3, r2
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	3308      	adds	r3, #8
 80041bc:	429a      	cmp	r2, r3
 80041be:	d104      	bne.n	80041ca <vTaskSwitchContext+0x8a>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <vTaskSwitchContext+0xb8>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	4a06      	ldr	r2, [pc, #24]	; (80041f0 <vTaskSwitchContext+0xb0>)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6013      	str	r3, [r2, #0]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000cd0 	.word	0x20000cd0
 80041ec:	20000cbc 	.word	0x20000cbc
 80041f0:	20000cb0 	.word	0x20000cb0
 80041f4:	200007d8 	.word	0x200007d8
 80041f8:	200007d4 	.word	0x200007d4

080041fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60fb      	str	r3, [r7, #12]
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <vTaskPlaceOnEventList+0x44>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3318      	adds	r3, #24
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fe fe87 	bl	8002f3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004230:	2101      	movs	r1, #1
 8004232:	6838      	ldr	r0, [r7, #0]
 8004234:	f000 fa7c 	bl	8004730 <prvAddCurrentTaskToDelayedList>
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	200007d4 	.word	0x200007d4

08004244 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	617b      	str	r3, [r7, #20]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <vTaskPlaceOnEventListRestricted+0x54>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3318      	adds	r3, #24
 8004272:	4619      	mov	r1, r3
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7fe fe3e 	bl	8002ef6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
 8004284:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	68b8      	ldr	r0, [r7, #8]
 800428a:	f000 fa51 	bl	8004730 <prvAddCurrentTaskToDelayedList>
	}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200007d4 	.word	0x200007d4

0800429c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	60fb      	str	r3, [r7, #12]
}
 80042c4:	bf00      	nop
 80042c6:	e7fe      	b.n	80042c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	3318      	adds	r3, #24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fe6f 	bl	8002fb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042d2:	4b1e      	ldr	r3, [pc, #120]	; (800434c <xTaskRemoveFromEventList+0xb0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d11d      	bne.n	8004316 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fe66 	bl	8002fb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <xTaskRemoveFromEventList+0xb4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d903      	bls.n	80042f8 <xTaskRemoveFromEventList+0x5c>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	4a16      	ldr	r2, [pc, #88]	; (8004350 <xTaskRemoveFromEventList+0xb4>)
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4a13      	ldr	r2, [pc, #76]	; (8004354 <xTaskRemoveFromEventList+0xb8>)
 8004306:	441a      	add	r2, r3
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f7fe fdf1 	bl	8002ef6 <vListInsertEnd>
 8004314:	e005      	b.n	8004322 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	3318      	adds	r3, #24
 800431a:	4619      	mov	r1, r3
 800431c:	480e      	ldr	r0, [pc, #56]	; (8004358 <xTaskRemoveFromEventList+0xbc>)
 800431e:	f7fe fdea 	bl	8002ef6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <xTaskRemoveFromEventList+0xc0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	429a      	cmp	r2, r3
 800432e:	d905      	bls.n	800433c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004330:	2301      	movs	r3, #1
 8004332:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <xTaskRemoveFromEventList+0xc4>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e001      	b.n	8004340 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004340:	697b      	ldr	r3, [r7, #20]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000cd0 	.word	0x20000cd0
 8004350:	20000cb0 	.word	0x20000cb0
 8004354:	200007d8 	.word	0x200007d8
 8004358:	20000c68 	.word	0x20000c68
 800435c:	200007d4 	.word	0x200007d4
 8004360:	20000cbc 	.word	0x20000cbc

08004364 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <vTaskInternalSetTimeOutState+0x24>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <vTaskInternalSetTimeOutState+0x28>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	605a      	str	r2, [r3, #4]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20000cc0 	.word	0x20000cc0
 800438c:	20000cac 	.word	0x20000cac

08004390 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	613b      	str	r3, [r7, #16]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	60fb      	str	r3, [r7, #12]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80043d2:	f000 fe7f 	bl	80050d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043d6:	4b1d      	ldr	r3, [pc, #116]	; (800444c <xTaskCheckForTimeOut+0xbc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d102      	bne.n	80043f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e023      	b.n	800443e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <xTaskCheckForTimeOut+0xc0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d007      	beq.n	8004412 <xTaskCheckForTimeOut+0x82>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	429a      	cmp	r2, r3
 800440a:	d302      	bcc.n	8004412 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800440c:	2301      	movs	r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	e015      	b.n	800443e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	429a      	cmp	r2, r3
 800441a:	d20b      	bcs.n	8004434 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad2      	subs	r2, r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ff9b 	bl	8004364 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	e004      	b.n	800443e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800443a:	2301      	movs	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800443e:	f000 fe79 	bl	8005134 <vPortExitCritical>

	return xReturn;
 8004442:	69fb      	ldr	r3, [r7, #28]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3720      	adds	r7, #32
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000cac 	.word	0x20000cac
 8004450:	20000cc0 	.word	0x20000cc0

08004454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <vTaskMissedYield+0x14>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]
}
 800445e:	bf00      	nop
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	20000cbc 	.word	0x20000cbc

0800446c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004474:	f000 f852 	bl	800451c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <prvIdleTask+0x28>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d9f9      	bls.n	8004474 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <prvIdleTask+0x2c>)
 8004482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004490:	e7f0      	b.n	8004474 <prvIdleTask+0x8>
 8004492:	bf00      	nop
 8004494:	200007d8 	.word	0x200007d8
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044a2:	2300      	movs	r3, #0
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	e00c      	b.n	80044c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4a12      	ldr	r2, [pc, #72]	; (80044fc <prvInitialiseTaskLists+0x60>)
 80044b4:	4413      	add	r3, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fcf0 	bl	8002e9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3301      	adds	r3, #1
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b37      	cmp	r3, #55	; 0x37
 80044c6:	d9ef      	bls.n	80044a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044c8:	480d      	ldr	r0, [pc, #52]	; (8004500 <prvInitialiseTaskLists+0x64>)
 80044ca:	f7fe fce7 	bl	8002e9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ce:	480d      	ldr	r0, [pc, #52]	; (8004504 <prvInitialiseTaskLists+0x68>)
 80044d0:	f7fe fce4 	bl	8002e9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044d4:	480c      	ldr	r0, [pc, #48]	; (8004508 <prvInitialiseTaskLists+0x6c>)
 80044d6:	f7fe fce1 	bl	8002e9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044da:	480c      	ldr	r0, [pc, #48]	; (800450c <prvInitialiseTaskLists+0x70>)
 80044dc:	f7fe fcde 	bl	8002e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044e0:	480b      	ldr	r0, [pc, #44]	; (8004510 <prvInitialiseTaskLists+0x74>)
 80044e2:	f7fe fcdb 	bl	8002e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <prvInitialiseTaskLists+0x78>)
 80044e8:	4a05      	ldr	r2, [pc, #20]	; (8004500 <prvInitialiseTaskLists+0x64>)
 80044ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <prvInitialiseTaskLists+0x7c>)
 80044ee:	4a05      	ldr	r2, [pc, #20]	; (8004504 <prvInitialiseTaskLists+0x68>)
 80044f0:	601a      	str	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	200007d8 	.word	0x200007d8
 8004500:	20000c38 	.word	0x20000c38
 8004504:	20000c4c 	.word	0x20000c4c
 8004508:	20000c68 	.word	0x20000c68
 800450c:	20000c7c 	.word	0x20000c7c
 8004510:	20000c94 	.word	0x20000c94
 8004514:	20000c60 	.word	0x20000c60
 8004518:	20000c64 	.word	0x20000c64

0800451c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004522:	e019      	b.n	8004558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004524:	f000 fdd6 	bl	80050d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004528:	4b10      	ldr	r3, [pc, #64]	; (800456c <prvCheckTasksWaitingTermination+0x50>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe fd3b 	bl	8002fb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <prvCheckTasksWaitingTermination+0x54>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3b01      	subs	r3, #1
 8004540:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <prvCheckTasksWaitingTermination+0x54>)
 8004542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <prvCheckTasksWaitingTermination+0x58>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3b01      	subs	r3, #1
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <prvCheckTasksWaitingTermination+0x58>)
 800454c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800454e:	f000 fdf1 	bl	8005134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f810 	bl	8004578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <prvCheckTasksWaitingTermination+0x58>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e1      	bne.n	8004524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000c7c 	.word	0x20000c7c
 8004570:	20000ca8 	.word	0x20000ca8
 8004574:	20000c90 	.word	0x20000c90

08004578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	4618      	mov	r0, r3
 8004590:	f000 ff8e 	bl	80054b0 <vPortFree>
				vPortFree( pxTCB );
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 ff8b 	bl	80054b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800459a:	e018      	b.n	80045ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d103      	bne.n	80045ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 ff82 	bl	80054b0 <vPortFree>
	}
 80045ac:	e00f      	b.n	80045ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d00a      	beq.n	80045ce <prvDeleteTCB+0x56>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	60fb      	str	r3, [r7, #12]
}
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <prvDeleteTCB+0x54>
	}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045de:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <prvResetNextTaskUnblockTime+0x38>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <prvResetNextTaskUnblockTime+0x3c>)
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295
 80045ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045f0:	e008      	b.n	8004604 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <prvResetNextTaskUnblockTime+0x38>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a04      	ldr	r2, [pc, #16]	; (8004614 <prvResetNextTaskUnblockTime+0x3c>)
 8004602:	6013      	str	r3, [r2, #0]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20000c60 	.word	0x20000c60
 8004614:	20000cc8 	.word	0x20000cc8

08004618 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <xTaskGetSchedulerState+0x34>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004626:	2301      	movs	r3, #1
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	e008      	b.n	800463e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <xTaskGetSchedulerState+0x38>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004634:	2302      	movs	r3, #2
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	e001      	b.n	800463e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800463e:	687b      	ldr	r3, [r7, #4]
	}
 8004640:	4618      	mov	r0, r3
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000cb4 	.word	0x20000cb4
 8004650:	20000cd0 	.word	0x20000cd0

08004654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d056      	beq.n	8004718 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800466a:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <xTaskPriorityDisinherit+0xd0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	429a      	cmp	r2, r3
 8004672:	d00a      	beq.n	800468a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	60fb      	str	r3, [r7, #12]
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60bb      	str	r3, [r7, #8]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	1e5a      	subs	r2, r3, #1
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d02c      	beq.n	8004718 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d128      	bne.n	8004718 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fc70 	bl	8002fb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <xTaskPriorityDisinherit+0xd4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d903      	bls.n	80046f8 <xTaskPriorityDisinherit+0xa4>
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <xTaskPriorityDisinherit+0xd4>)
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4a09      	ldr	r2, [pc, #36]	; (800472c <xTaskPriorityDisinherit+0xd8>)
 8004706:	441a      	add	r2, r3
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f7fe fbf1 	bl	8002ef6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004718:	697b      	ldr	r3, [r7, #20]
	}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	200007d4 	.word	0x200007d4
 8004728:	20000cb0 	.word	0x20000cb0
 800472c:	200007d8 	.word	0x200007d8

08004730 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800473a:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004740:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3304      	adds	r3, #4
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe fc32 	bl	8002fb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d10a      	bne.n	800476a <prvAddCurrentTaskToDelayedList+0x3a>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800475a:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4819      	ldr	r0, [pc, #100]	; (80047c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004764:	f7fe fbc7 	bl	8002ef6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004768:	e026      	b.n	80047b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4413      	add	r3, r2
 8004770:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004772:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	429a      	cmp	r2, r3
 8004780:	d209      	bcs.n	8004796 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004782:	4b12      	ldr	r3, [pc, #72]	; (80047cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f7fe fbd5 	bl	8002f3e <vListInsert>
}
 8004794:	e010      	b.n	80047b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f7fe fbcb 	bl	8002f3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d202      	bcs.n	80047b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80047b2:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	6013      	str	r3, [r2, #0]
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000cac 	.word	0x20000cac
 80047c4:	200007d4 	.word	0x200007d4
 80047c8:	20000c94 	.word	0x20000c94
 80047cc:	20000c64 	.word	0x20000c64
 80047d0:	20000c60 	.word	0x20000c60
 80047d4:	20000cc8 	.word	0x20000cc8

080047d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047e2:	f000 fb07 	bl	8004df4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047e6:	4b1c      	ldr	r3, [pc, #112]	; (8004858 <xTimerCreateTimerTask+0x80>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d021      	beq.n	8004832 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047f6:	1d3a      	adds	r2, r7, #4
 80047f8:	f107 0108 	add.w	r1, r7, #8
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	4618      	mov	r0, r3
 8004802:	f7fe fb31 	bl	8002e68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	9202      	str	r2, [sp, #8]
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	2302      	movs	r3, #2
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	460a      	mov	r2, r1
 8004818:	4910      	ldr	r1, [pc, #64]	; (800485c <xTimerCreateTimerTask+0x84>)
 800481a:	4811      	ldr	r0, [pc, #68]	; (8004860 <xTimerCreateTimerTask+0x88>)
 800481c:	f7ff f8de 	bl	80039dc <xTaskCreateStatic>
 8004820:	4603      	mov	r3, r0
 8004822:	4a10      	ldr	r2, [pc, #64]	; (8004864 <xTimerCreateTimerTask+0x8c>)
 8004824:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004826:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <xTimerCreateTimerTask+0x8c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800482e:	2301      	movs	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	613b      	str	r3, [r7, #16]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800484e:	697b      	ldr	r3, [r7, #20]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000d04 	.word	0x20000d04
 800485c:	08006ccc 	.word	0x08006ccc
 8004860:	0800499d 	.word	0x0800499d
 8004864:	20000d08 	.word	0x20000d08

08004868 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	623b      	str	r3, [r7, #32]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <xTimerGenericCommand+0x98>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d02a      	beq.n	80048f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	dc18      	bgt.n	80048e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048b0:	f7ff feb2 	bl	8004618 <xTaskGetSchedulerState>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d109      	bne.n	80048ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <xTimerGenericCommand+0x98>)
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	f107 0110 	add.w	r1, r7, #16
 80048c2:	2300      	movs	r3, #0
 80048c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c6:	f7fe fca1 	bl	800320c <xQueueGenericSend>
 80048ca:	6278      	str	r0, [r7, #36]	; 0x24
 80048cc:	e012      	b.n	80048f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048ce:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <xTimerGenericCommand+0x98>)
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	f107 0110 	add.w	r1, r7, #16
 80048d6:	2300      	movs	r3, #0
 80048d8:	2200      	movs	r2, #0
 80048da:	f7fe fc97 	bl	800320c <xQueueGenericSend>
 80048de:	6278      	str	r0, [r7, #36]	; 0x24
 80048e0:	e008      	b.n	80048f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <xTimerGenericCommand+0x98>)
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	f107 0110 	add.w	r1, r7, #16
 80048ea:	2300      	movs	r3, #0
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	f7fe fd8b 	bl	8003408 <xQueueGenericSendFromISR>
 80048f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3728      	adds	r7, #40	; 0x28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000d04 	.word	0x20000d04

08004904 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af02      	add	r7, sp, #8
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490e:	4b22      	ldr	r3, [pc, #136]	; (8004998 <prvProcessExpiredTimer+0x94>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	3304      	adds	r3, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fb47 	bl	8002fb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d022      	beq.n	8004976 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	18d1      	adds	r1, r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	6978      	ldr	r0, [r7, #20]
 800493e:	f000 f8d1 	bl	8004ae4 <prvInsertTimerInActiveList>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01f      	beq.n	8004988 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004948:	2300      	movs	r3, #0
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2300      	movs	r3, #0
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	2100      	movs	r1, #0
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f7ff ff88 	bl	8004868 <xTimerGenericCommand>
 8004958:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d113      	bne.n	8004988 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60fb      	str	r3, [r7, #12]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	b2da      	uxtb	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	6978      	ldr	r0, [r7, #20]
 800498e:	4798      	blx	r3
}
 8004990:	bf00      	nop
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000cfc 	.word	0x20000cfc

0800499c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049a4:	f107 0308 	add.w	r3, r7, #8
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 f857 	bl	8004a5c <prvGetNextExpireTime>
 80049ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4619      	mov	r1, r3
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f803 	bl	80049c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80049ba:	f000 f8d5 	bl	8004b68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049be:	e7f1      	b.n	80049a4 <prvTimerTask+0x8>

080049c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049ca:	f7ff fa43 	bl	8003e54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ce:	f107 0308 	add.w	r3, r7, #8
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f866 	bl	8004aa4 <prvSampleTimeNow>
 80049d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d130      	bne.n	8004a42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <prvProcessTimerOrBlockTask+0x3c>
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d806      	bhi.n	80049fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049ee:	f7ff fa3f 	bl	8003e70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049f2:	68f9      	ldr	r1, [r7, #12]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ff85 	bl	8004904 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049fa:	e024      	b.n	8004a46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <prvProcessTimerOrBlockTask+0x90>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <prvProcessTimerOrBlockTask+0x50>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <prvProcessTimerOrBlockTask+0x52>
 8004a10:	2300      	movs	r3, #0
 8004a12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <prvProcessTimerOrBlockTask+0x94>)
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	4619      	mov	r1, r3
 8004a22:	f7fe ffa7 	bl	8003974 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a26:	f7ff fa23 	bl	8003e70 <xTaskResumeAll>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <prvProcessTimerOrBlockTask+0x98>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
}
 8004a40:	e001      	b.n	8004a46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a42:	f7ff fa15 	bl	8003e70 <xTaskResumeAll>
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000d00 	.word	0x20000d00
 8004a54:	20000d04 	.word	0x20000d04
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <prvGetNextExpireTime+0x44>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <prvGetNextExpireTime+0x16>
 8004a6e:	2201      	movs	r2, #1
 8004a70:	e000      	b.n	8004a74 <prvGetNextExpireTime+0x18>
 8004a72:	2200      	movs	r2, #0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <prvGetNextExpireTime+0x44>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e001      	b.n	8004a90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a90:	68fb      	ldr	r3, [r7, #12]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000cfc 	.word	0x20000cfc

08004aa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004aac:	f7ff fa7e 	bl	8003fac <xTaskGetTickCount>
 8004ab0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <prvSampleTimeNow+0x3c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d205      	bcs.n	8004ac8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004abc:	f000 f936 	bl	8004d2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e002      	b.n	8004ace <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ace:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <prvSampleTimeNow+0x3c>)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000d0c 	.word	0x20000d0c

08004ae4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d812      	bhi.n	8004b30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e01b      	b.n	8004b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <prvInsertTimerInActiveList+0x7c>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7fe fa08 	bl	8002f3e <vListInsert>
 8004b2e:	e012      	b.n	8004b56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d206      	bcs.n	8004b46 <prvInsertTimerInActiveList+0x62>
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e007      	b.n	8004b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b46:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <prvInsertTimerInActiveList+0x80>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f7fe f9f4 	bl	8002f3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b56:	697b      	ldr	r3, [r7, #20]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000d00 	.word	0x20000d00
 8004b64:	20000cfc 	.word	0x20000cfc

08004b68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08e      	sub	sp, #56	; 0x38
 8004b6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b6e:	e0ca      	b.n	8004d06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	da18      	bge.n	8004ba8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	3304      	adds	r3, #4
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	61fb      	str	r3, [r7, #28]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b9e:	6850      	ldr	r0, [r2, #4]
 8004ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba2:	6892      	ldr	r2, [r2, #8]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f2c0 80ab 	blt.w	8004d06 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe f9f5 	bl	8002fb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff6b 	bl	8004aa4 <prvSampleTimeNow>
 8004bce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b09      	cmp	r3, #9
 8004bd4:	f200 8096 	bhi.w	8004d04 <prvProcessReceivedCommands+0x19c>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <prvProcessReceivedCommands+0x78>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c09 	.word	0x08004c09
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c09 	.word	0x08004c09
 8004bec:	08004c7d 	.word	0x08004c7d
 8004bf0:	08004c91 	.word	0x08004c91
 8004bf4:	08004cdb 	.word	0x08004cdb
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c09 	.word	0x08004c09
 8004c00:	08004c7d 	.word	0x08004c7d
 8004c04:	08004c91 	.word	0x08004c91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	18d1      	adds	r1, r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c28:	f7ff ff5c 	bl	8004ae4 <prvInsertTimerInActiveList>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d069      	beq.n	8004d06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d05e      	beq.n	8004d06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	441a      	add	r2, r3
 8004c50:	2300      	movs	r3, #0
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2300      	movs	r3, #0
 8004c56:	2100      	movs	r1, #0
 8004c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5a:	f7ff fe05 	bl	8004868 <xTimerGenericCommand>
 8004c5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d14f      	bne.n	8004d06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	61bb      	str	r3, [r7, #24]
}
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004c8e:	e03a      	b.n	8004d06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	617b      	str	r3, [r7, #20]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	18d1      	adds	r1, r2, r3
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd4:	f7ff ff06 	bl	8004ae4 <prvInsertTimerInActiveList>
					break;
 8004cd8:	e015      	b.n	8004d06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cea:	f000 fbe1 	bl	80054b0 <vPortFree>
 8004cee:	e00a      	b.n	8004d06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d02:	e000      	b.n	8004d06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004d04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d06:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <prvProcessReceivedCommands+0x1c0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	1d39      	adds	r1, r7, #4
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe fc16 	bl	8003540 <xQueueReceive>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f47f af2a 	bne.w	8004b70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	3730      	adds	r7, #48	; 0x30
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000d04 	.word	0x20000d04

08004d2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d32:	e048      	b.n	8004dc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d34:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe f92f 	bl	8002fb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d02e      	beq.n	8004dc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d90e      	bls.n	8004d98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d86:	4b19      	ldr	r3, [pc, #100]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fe f8d4 	bl	8002f3e <vListInsert>
 8004d96:	e016      	b.n	8004dc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	2100      	movs	r1, #0
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff fd60 	bl	8004868 <xTimerGenericCommand>
 8004da8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	603b      	str	r3, [r7, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1b1      	bne.n	8004d34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <prvSwitchTimerLists+0xc4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a04      	ldr	r2, [pc, #16]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004ddc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dde:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <prvSwitchTimerLists+0xc4>)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	6013      	str	r3, [r2, #0]
}
 8004de4:	bf00      	nop
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000cfc 	.word	0x20000cfc
 8004df0:	20000d00 	.word	0x20000d00

08004df4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dfa:	f000 f96b 	bl	80050d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <prvCheckForValidListAndQueue+0x60>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d120      	bne.n	8004e48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e06:	4814      	ldr	r0, [pc, #80]	; (8004e58 <prvCheckForValidListAndQueue+0x64>)
 8004e08:	f7fe f848 	bl	8002e9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e0c:	4813      	ldr	r0, [pc, #76]	; (8004e5c <prvCheckForValidListAndQueue+0x68>)
 8004e0e:	f7fe f845 	bl	8002e9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e12:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <prvCheckForValidListAndQueue+0x6c>)
 8004e14:	4a10      	ldr	r2, [pc, #64]	; (8004e58 <prvCheckForValidListAndQueue+0x64>)
 8004e16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <prvCheckForValidListAndQueue+0x70>)
 8004e1a:	4a10      	ldr	r2, [pc, #64]	; (8004e5c <prvCheckForValidListAndQueue+0x68>)
 8004e1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <prvCheckForValidListAndQueue+0x74>)
 8004e24:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <prvCheckForValidListAndQueue+0x78>)
 8004e26:	2110      	movs	r1, #16
 8004e28:	200a      	movs	r0, #10
 8004e2a:	f7fe f953 	bl	80030d4 <xQueueGenericCreateStatic>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4a08      	ldr	r2, [pc, #32]	; (8004e54 <prvCheckForValidListAndQueue+0x60>)
 8004e32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e34:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <prvCheckForValidListAndQueue+0x60>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <prvCheckForValidListAndQueue+0x60>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	490b      	ldr	r1, [pc, #44]	; (8004e70 <prvCheckForValidListAndQueue+0x7c>)
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fe fd6c 	bl	8003920 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e48:	f000 f974 	bl	8005134 <vPortExitCritical>
}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000d04 	.word	0x20000d04
 8004e58:	20000cd4 	.word	0x20000cd4
 8004e5c:	20000ce8 	.word	0x20000ce8
 8004e60:	20000cfc 	.word	0x20000cfc
 8004e64:	20000d00 	.word	0x20000d00
 8004e68:	20000db0 	.word	0x20000db0
 8004e6c:	20000d10 	.word	0x20000d10
 8004e70:	08006cd4 	.word	0x08006cd4

08004e74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3b04      	subs	r3, #4
 8004e84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f023 0201 	bic.w	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3b04      	subs	r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ea4:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <pxPortInitialiseStack+0x64>)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3b14      	subs	r3, #20
 8004eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3b04      	subs	r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f06f 0202 	mvn.w	r2, #2
 8004ec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3b20      	subs	r3, #32
 8004ec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	08004edd 	.word	0x08004edd

08004edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <prvTaskExitError+0x54>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d00a      	beq.n	8004f06 <prvTaskExitError+0x2a>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	60fb      	str	r3, [r7, #12]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <prvTaskExitError+0x28>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	60bb      	str	r3, [r7, #8]
}
 8004f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f1a:	bf00      	nop
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0fc      	beq.n	8004f1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	2000000c 	.word	0x2000000c
	...

08004f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <pxCurrentTCBConst2>)
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	6808      	ldr	r0, [r1, #0]
 8004f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4a:	f380 8809 	msr	PSP, r0
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f380 8811 	msr	BASEPRI, r0
 8004f5a:	4770      	bx	lr
 8004f5c:	f3af 8000 	nop.w

08004f60 <pxCurrentTCBConst2>:
 8004f60:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop

08004f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f68:	4808      	ldr	r0, [pc, #32]	; (8004f8c <prvPortStartFirstTask+0x24>)
 8004f6a:	6800      	ldr	r0, [r0, #0]
 8004f6c:	6800      	ldr	r0, [r0, #0]
 8004f6e:	f380 8808 	msr	MSP, r0
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8814 	msr	CONTROL, r0
 8004f7a:	b662      	cpsie	i
 8004f7c:	b661      	cpsie	f
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	df00      	svc	0
 8004f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f8a:	bf00      	nop
 8004f8c:	e000ed08 	.word	0xe000ed08

08004f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f96:	4b46      	ldr	r3, [pc, #280]	; (80050b0 <xPortStartScheduler+0x120>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a46      	ldr	r2, [pc, #280]	; (80050b4 <xPortStartScheduler+0x124>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10a      	bne.n	8004fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	613b      	str	r3, [r7, #16]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fb6:	4b3e      	ldr	r3, [pc, #248]	; (80050b0 <xPortStartScheduler+0x120>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3f      	ldr	r2, [pc, #252]	; (80050b8 <xPortStartScheduler+0x128>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10a      	bne.n	8004fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fd6:	4b39      	ldr	r3, [pc, #228]	; (80050bc <xPortStartScheduler+0x12c>)
 8004fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	22ff      	movs	r2, #255	; 0xff
 8004fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <xPortStartScheduler+0x130>)
 8004ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ffe:	4b31      	ldr	r3, [pc, #196]	; (80050c4 <xPortStartScheduler+0x134>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005004:	e009      	b.n	800501a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <xPortStartScheduler+0x134>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3b01      	subs	r3, #1
 800500c:	4a2d      	ldr	r2, [pc, #180]	; (80050c4 <xPortStartScheduler+0x134>)
 800500e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d0ef      	beq.n	8005006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <xPortStartScheduler+0x134>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1c3 0307 	rsb	r3, r3, #7
 800502e:	2b04      	cmp	r3, #4
 8005030:	d00a      	beq.n	8005048 <xPortStartScheduler+0xb8>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60bb      	str	r3, [r7, #8]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <xPortStartScheduler+0x134>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <xPortStartScheduler+0x134>)
 8005050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005052:	4b1c      	ldr	r3, [pc, #112]	; (80050c4 <xPortStartScheduler+0x134>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800505a:	4a1a      	ldr	r2, [pc, #104]	; (80050c4 <xPortStartScheduler+0x134>)
 800505c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <xPortStartScheduler+0x138>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <xPortStartScheduler+0x138>)
 800506c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <xPortStartScheduler+0x138>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <xPortStartScheduler+0x138>)
 8005078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800507c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800507e:	f000 f8dd 	bl	800523c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <xPortStartScheduler+0x13c>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005088:	f000 f8fc 	bl	8005284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <xPortStartScheduler+0x140>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <xPortStartScheduler+0x140>)
 8005092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005098:	f7ff ff66 	bl	8004f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800509c:	f7ff f850 	bl	8004140 <vTaskSwitchContext>
	prvTaskExitError();
 80050a0:	f7ff ff1c 	bl	8004edc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	e000ed00 	.word	0xe000ed00
 80050b4:	410fc271 	.word	0x410fc271
 80050b8:	410fc270 	.word	0x410fc270
 80050bc:	e000e400 	.word	0xe000e400
 80050c0:	20000e00 	.word	0x20000e00
 80050c4:	20000e04 	.word	0x20000e04
 80050c8:	e000ed20 	.word	0xe000ed20
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	e000ef34 	.word	0xe000ef34

080050d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	607b      	str	r3, [r7, #4]
}
 80050ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <vPortEnterCritical+0x58>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <vPortEnterCritical+0x58>)
 80050f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <vPortEnterCritical+0x58>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10f      	bne.n	8005120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <vPortEnterCritical+0x5c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <vPortEnterCritical+0x4c>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	603b      	str	r3, [r7, #0]
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <vPortEnterCritical+0x4a>
	}
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	2000000c 	.word	0x2000000c
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800513a:	4b12      	ldr	r3, [pc, #72]	; (8005184 <vPortExitCritical+0x50>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <vPortExitCritical+0x24>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	607b      	str	r3, [r7, #4]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <vPortExitCritical+0x50>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <vPortExitCritical+0x50>)
 8005160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <vPortExitCritical+0x50>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <vPortExitCritical+0x42>
 800516a:	2300      	movs	r3, #0
 800516c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f383 8811 	msr	BASEPRI, r3
}
 8005174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2000000c 	.word	0x2000000c
	...

08005190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005190:	f3ef 8009 	mrs	r0, PSP
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <pxCurrentTCBConst>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f01e 0f10 	tst.w	lr, #16
 80051a0:	bf08      	it	eq
 80051a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	6010      	str	r0, [r2, #0]
 80051ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051b4:	f380 8811 	msr	BASEPRI, r0
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f7fe ffbe 	bl	8004140 <vTaskSwitchContext>
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f380 8811 	msr	BASEPRI, r0
 80051cc:	bc09      	pop	{r0, r3}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d6:	f01e 0f10 	tst.w	lr, #16
 80051da:	bf08      	it	eq
 80051dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051e0:	f380 8809 	msr	PSP, r0
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst>:
 80051f0:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005212:	f7fe fedb 	bl	8003fcc <xTaskIncrementTick>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <xPortSysTickHandler+0x40>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f383 8811 	msr	BASEPRI, r3
}
 800522e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005246:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <vPortSetupTimerInterrupt+0x38>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <vPortSetupTimerInterrupt+0x3c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <vPortSetupTimerInterrupt+0x40>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	4a09      	ldr	r2, [pc, #36]	; (8005280 <vPortSetupTimerInterrupt+0x44>)
 800525a:	3b01      	subs	r3, #1
 800525c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000e010 	.word	0xe000e010
 8005274:	e000e018 	.word	0xe000e018
 8005278:	20000000 	.word	0x20000000
 800527c:	10624dd3 	.word	0x10624dd3
 8005280:	e000e014 	.word	0xe000e014

08005284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005294 <vPortEnableVFP+0x10>
 8005288:	6801      	ldr	r1, [r0, #0]
 800528a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800528e:	6001      	str	r1, [r0, #0]
 8005290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005292:	bf00      	nop
 8005294:	e000ed88 	.word	0xe000ed88

08005298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800529e:	f3ef 8305 	mrs	r3, IPSR
 80052a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d914      	bls.n	80052d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <vPortValidateInterruptPriority+0x70>)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052b4:	4b15      	ldr	r3, [pc, #84]	; (800530c <vPortValidateInterruptPriority+0x74>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	7afa      	ldrb	r2, [r7, #11]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d20a      	bcs.n	80052d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	607b      	str	r3, [r7, #4]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052d4:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <vPortValidateInterruptPriority+0x78>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <vPortValidateInterruptPriority+0x7c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d90a      	bls.n	80052fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	603b      	str	r3, [r7, #0]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <vPortValidateInterruptPriority+0x60>
	}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	e000e3f0 	.word	0xe000e3f0
 800530c:	20000e00 	.word	0x20000e00
 8005310:	e000ed0c 	.word	0xe000ed0c
 8005314:	20000e04 	.word	0x20000e04

08005318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	; 0x28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005324:	f7fe fd96 	bl	8003e54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005328:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <pvPortMalloc+0x180>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005330:	f000 f920 	bl	8005574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005334:	4b59      	ldr	r3, [pc, #356]	; (800549c <pvPortMalloc+0x184>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 8093 	bne.w	8005468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01d      	beq.n	8005384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005348:	2208      	movs	r2, #8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b00      	cmp	r3, #0
 8005358:	d014      	beq.n	8005384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	3308      	adds	r3, #8
 8005362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <pvPortMalloc+0x6c>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	617b      	str	r3, [r7, #20]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d06e      	beq.n	8005468 <pvPortMalloc+0x150>
 800538a:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <pvPortMalloc+0x188>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d869      	bhi.n	8005468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005394:	4b43      	ldr	r3, [pc, #268]	; (80054a4 <pvPortMalloc+0x18c>)
 8005396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005398:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <pvPortMalloc+0x18c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800539e:	e004      	b.n	80053aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <pvPortMalloc+0xa4>
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f1      	bne.n	80053a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <pvPortMalloc+0x180>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d050      	beq.n	8005468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2208      	movs	r2, #8
 80053cc:	4413      	add	r3, r2
 80053ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	2308      	movs	r3, #8
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d91f      	bls.n	8005428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <pvPortMalloc+0xf8>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	613b      	str	r3, [r7, #16]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005422:	69b8      	ldr	r0, [r7, #24]
 8005424:	f000 f908 	bl	8005638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005428:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <pvPortMalloc+0x188>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	4a1b      	ldr	r2, [pc, #108]	; (80054a0 <pvPortMalloc+0x188>)
 8005434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <pvPortMalloc+0x188>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <pvPortMalloc+0x190>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d203      	bcs.n	800544a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005442:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <pvPortMalloc+0x188>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <pvPortMalloc+0x190>)
 8005448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <pvPortMalloc+0x184>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	431a      	orrs	r2, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <pvPortMalloc+0x194>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	4a11      	ldr	r2, [pc, #68]	; (80054ac <pvPortMalloc+0x194>)
 8005466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005468:	f7fe fd02 	bl	8003e70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <pvPortMalloc+0x174>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	60fb      	str	r3, [r7, #12]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <pvPortMalloc+0x172>
	return pvReturn;
 800548c:	69fb      	ldr	r3, [r7, #28]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3728      	adds	r7, #40	; 0x28
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20004a10 	.word	0x20004a10
 800549c:	20004a24 	.word	0x20004a24
 80054a0:	20004a14 	.word	0x20004a14
 80054a4:	20004a08 	.word	0x20004a08
 80054a8:	20004a18 	.word	0x20004a18
 80054ac:	20004a1c 	.word	0x20004a1c

080054b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d04d      	beq.n	800555e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054c2:	2308      	movs	r3, #8
 80054c4:	425b      	negs	r3, r3
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	4b24      	ldr	r3, [pc, #144]	; (8005568 <vPortFree+0xb8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <vPortFree+0x44>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	60fb      	str	r3, [r7, #12]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <vPortFree+0x62>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	60bb      	str	r3, [r7, #8]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <vPortFree+0xb8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01e      	beq.n	800555e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11a      	bne.n	800555e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <vPortFree+0xb8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	43db      	mvns	r3, r3
 8005532:	401a      	ands	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005538:	f7fe fc8c 	bl	8003e54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <vPortFree+0xbc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4413      	add	r3, r2
 8005546:	4a09      	ldr	r2, [pc, #36]	; (800556c <vPortFree+0xbc>)
 8005548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800554a:	6938      	ldr	r0, [r7, #16]
 800554c:	f000 f874 	bl	8005638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <vPortFree+0xc0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a06      	ldr	r2, [pc, #24]	; (8005570 <vPortFree+0xc0>)
 8005558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800555a:	f7fe fc89 	bl	8003e70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20004a24 	.word	0x20004a24
 800556c:	20004a14 	.word	0x20004a14
 8005570:	20004a20 	.word	0x20004a20

08005574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800557a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800557e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <prvHeapInit+0xac>)
 8005582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3307      	adds	r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0307 	bic.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <prvHeapInit+0xac>)
 80055a4:	4413      	add	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <prvHeapInit+0xb0>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055b2:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <prvHeapInit+0xb0>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055c0:	2208      	movs	r2, #8
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a15      	ldr	r2, [pc, #84]	; (8005628 <prvHeapInit+0xb4>)
 80055d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <prvHeapInit+0xb4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <prvHeapInit+0xb4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <prvHeapInit+0xb4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <prvHeapInit+0xb8>)
 8005602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a09      	ldr	r2, [pc, #36]	; (8005630 <prvHeapInit+0xbc>)
 800560a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <prvHeapInit+0xc0>)
 800560e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	20000e08 	.word	0x20000e08
 8005624:	20004a08 	.word	0x20004a08
 8005628:	20004a10 	.word	0x20004a10
 800562c:	20004a18 	.word	0x20004a18
 8005630:	20004a14 	.word	0x20004a14
 8005634:	20004a24 	.word	0x20004a24

08005638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005640:	4b28      	ldr	r3, [pc, #160]	; (80056e4 <prvInsertBlockIntoFreeList+0xac>)
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <prvInsertBlockIntoFreeList+0x14>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d8f7      	bhi.n	8005646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4413      	add	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d108      	bne.n	800567a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	441a      	add	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d118      	bne.n	80056c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d00d      	beq.n	80056b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e008      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e003      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d002      	beq.n	80056d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20004a08 	.word	0x20004a08
 80056e8:	20004a10 	.word	0x20004a10

080056ec <MyTask>:
/************************************************************************************************************************************************
*************************************************************************************************************************************************
*************************************************************************************************************************************************/

static void MyTask(void *arg)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	(void)(arg);
	atc_fnStatus_t ret;
  printf("In main task\r\n");
 80056f4:	480f      	ldr	r0, [pc, #60]	; (8005734 <MyTask+0x48>)
 80056f6:	f000 fc4f 	bl	8005f98 <puts>

  ret = atc_Init();
 80056fa:	f000 f9c3 	bl	8005a84 <atc_Init>
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]
  printf("ATC init status %d\r\n", ret);
 8005702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005706:	4619      	mov	r1, r3
 8005708:	480b      	ldr	r0, [pc, #44]	; (8005738 <MyTask+0x4c>)
 800570a:	f000 fbdf 	bl	8005ecc <iprintf>
  atc_InitCmdRespTable();
 800570e:	f000 f875 	bl	80057fc <atc_InitCmdRespTable>

  while(1){
  	ret = atc_Test(ATC_LTE_MODULE, ATC_TEST);
 8005712:	2100      	movs	r1, #0
 8005714:	2001      	movs	r0, #1
 8005716:	f000 f9e5 	bl	8005ae4 <atc_Test>
 800571a:	4603      	mov	r3, r0
 800571c:	73fb      	strb	r3, [r7, #15]
  	printf("ATC TEST status %d\r\n", ret);
 800571e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005722:	4619      	mov	r1, r3
 8005724:	4805      	ldr	r0, [pc, #20]	; (800573c <MyTask+0x50>)
 8005726:	f000 fbd1 	bl	8005ecc <iprintf>

  	osDelay(1000);
 800572a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800572e:	f7fd fb65 	bl	8002dfc <osDelay>
  	ret = atc_Test(ATC_LTE_MODULE, ATC_TEST);
 8005732:	e7ee      	b.n	8005712 <MyTask+0x26>
 8005734:	08006ce8 	.word	0x08006ce8
 8005738:	08006cf8 	.word	0x08006cf8
 800573c:	08006d10 	.word	0x08006d10

08005740 <app_main>:

}


void app_main(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
	printf("\r\nVTS GEN 1\r\n");
 8005744:	480d      	ldr	r0, [pc, #52]	; (800577c <app_main+0x3c>)
 8005746:	f000 fc27 	bl	8005f98 <puts>
	printf("Build Date %s\r\n", __DATE__);
 800574a:	490d      	ldr	r1, [pc, #52]	; (8005780 <app_main+0x40>)
 800574c:	480d      	ldr	r0, [pc, #52]	; (8005784 <app_main+0x44>)
 800574e:	f000 fbbd 	bl	8005ecc <iprintf>
	printf("Build Time %s\r\n", __TIME__);
 8005752:	490d      	ldr	r1, [pc, #52]	; (8005788 <app_main+0x48>)
 8005754:	480d      	ldr	r0, [pc, #52]	; (800578c <app_main+0x4c>)
 8005756:	f000 fbb9 	bl	8005ecc <iprintf>

  /* Init scheduler */
  osKernelInitialize();
 800575a:	f7fd fa73 	bl	8002c44 <osKernelInitialize>

  mainTaskHandle = osThreadNew(MyTask, NULL, &mainTaskAttr);
 800575e:	4a0c      	ldr	r2, [pc, #48]	; (8005790 <app_main+0x50>)
 8005760:	2100      	movs	r1, #0
 8005762:	480c      	ldr	r0, [pc, #48]	; (8005794 <app_main+0x54>)
 8005764:	f7fd fab8 	bl	8002cd8 <osThreadNew>
 8005768:	4603      	mov	r3, r0
 800576a:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <app_main+0x58>)
 800576c:	6013      	str	r3, [r2, #0]

  printf("m here\r\n");
 800576e:	480b      	ldr	r0, [pc, #44]	; (800579c <app_main+0x5c>)
 8005770:	f000 fc12 	bl	8005f98 <puts>

  /* Start scheduler */
  osKernelStart();
 8005774:	f7fd fa8a 	bl	8002c8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1);
 8005778:	e7fe      	b.n	8005778 <app_main+0x38>
 800577a:	bf00      	nop
 800577c:	08006d28 	.word	0x08006d28
 8005780:	08006d38 	.word	0x08006d38
 8005784:	08006d44 	.word	0x08006d44
 8005788:	08006d54 	.word	0x08006d54
 800578c:	08006d60 	.word	0x08006d60
 8005790:	08006f44 	.word	0x08006f44
 8005794:	080056ed 	.word	0x080056ed
 8005798:	20004a28 	.word	0x20004a28
 800579c:	08006d70 	.word	0x08006d70

080057a0 <ClrFlags>:
/*!************************************************************************************************************************
 *
 *************************************************************************************************************************/

static inline void ClrFlags(port_uart_handle_t *handle)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	if(handle == &gsmHandle){
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a06      	ldr	r2, [pc, #24]	; (80057c4 <ClrFlags+0x24>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d104      	bne.n	80057ba <ClrFlags+0x1a>
		memset(&gsmUartInfo, 0, sizeof(uartInfo_t));
 80057b0:	2202      	movs	r2, #2
 80057b2:	2100      	movs	r1, #0
 80057b4:	4804      	ldr	r0, [pc, #16]	; (80057c8 <ClrFlags+0x28>)
 80057b6:	f000 fccf 	bl	8006158 <memset>
	}
}
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20004a2c 	.word	0x20004a2c
 80057c8:	20004aec 	.word	0x20004aec

080057cc <port_uart_Callback>:

void port_uart_Callback(port_uart_callback_t cbType, port_uart_handle_t *handle)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	6039      	str	r1, [r7, #0]
 80057d6:	71fb      	strb	r3, [r7, #7]
	if(handle == &gsmHandle){
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	4a06      	ldr	r2, [pc, #24]	; (80057f4 <port_uart_Callback+0x28>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d102      	bne.n	80057e6 <port_uart_Callback+0x1a>
		gsmUartInfo.cbType = cbType;
 80057e0:	4a05      	ldr	r2, [pc, #20]	; (80057f8 <port_uart_Callback+0x2c>)
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	7013      	strb	r3, [r2, #0]
	}
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20004a2c 	.word	0x20004a2c
 80057f8:	20004aec 	.word	0x20004aec

080057fc <atc_InitCmdRespTable>:

void atc_InitCmdRespTable(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b09e      	sub	sp, #120	; 0x78
 8005800:	af00      	add	r7, sp, #0
	memset(&lookUpTbl, 0, sizeof(lookUpTbl));
 8005802:	2278      	movs	r2, #120	; 0x78
 8005804:	2100      	movs	r1, #0
 8005806:	4837      	ldr	r0, [pc, #220]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 8005808:	f000 fca6 	bl	8006158 <memset>
	/* Basic commands */
	lookUpTbl[ATC_TEST] = (atc_lookUpTbl_t){"AT"EOS, "OK"};
 800580c:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 800580e:	4a36      	ldr	r2, [pc, #216]	; (80058e8 <atc_InitCmdRespTable+0xec>)
 8005810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005814:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_IMSI] = (atc_lookUpTbl_t){"AT+CIMI"EOS, "OK"};
 8005818:	4b32      	ldr	r3, [pc, #200]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 800581a:	4a34      	ldr	r2, [pc, #208]	; (80058ec <atc_InitCmdRespTable+0xf0>)
 800581c:	3308      	adds	r3, #8
 800581e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005822:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_ICCID] = (atc_lookUpTbl_t){"AT"EOS, "+ICCID:"};
 8005826:	4b2f      	ldr	r3, [pc, #188]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 8005828:	4a31      	ldr	r2, [pc, #196]	; (80058f0 <atc_InitCmdRespTable+0xf4>)
 800582a:	3310      	adds	r3, #16
 800582c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005830:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_MODEM_INFO] = (atc_lookUpTbl_t){"ATI"EOS, "OK"};
 8005834:	4b2b      	ldr	r3, [pc, #172]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 8005836:	4a2f      	ldr	r2, [pc, #188]	; (80058f4 <atc_InitCmdRespTable+0xf8>)
 8005838:	3318      	adds	r3, #24
 800583a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800583e:	e883 0003 	stmia.w	r3, {r0, r1}

	/* Network commands */
	lookUpTbl[ATC_NW_REG_STATUS] = (atc_lookUpTbl_t){"AT+CREG?"EOS, "+CREG:"};
 8005842:	4b28      	ldr	r3, [pc, #160]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 8005844:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <atc_InitCmdRespTable+0xfc>)
 8005846:	3320      	adds	r3, #32
 8005848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800584c:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_NW_RSSI_CHECK] = (atc_lookUpTbl_t){"AT+CSQ"EOS, "+CSQ:"};
 8005850:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 8005852:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <atc_InitCmdRespTable+0x100>)
 8005854:	3328      	adds	r3, #40	; 0x28
 8005856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800585a:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_NW_OP_NAME] = (atc_lookUpTbl_t){"AT+COPS?"EOS, "+COPS:"};
 800585e:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 8005860:	4a27      	ldr	r2, [pc, #156]	; (8005900 <atc_InitCmdRespTable+0x104>)
 8005862:	3330      	adds	r3, #48	; 0x30
 8005864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005868:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_NW_DEREG] = (atc_lookUpTbl_t){"AT+CGATT=0"EOS, "OK"};
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 800586e:	4a25      	ldr	r2, [pc, #148]	; (8005904 <atc_InitCmdRespTable+0x108>)
 8005870:	3338      	adds	r3, #56	; 0x38
 8005872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005876:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_NW_REREG] = (atc_lookUpTbl_t){"AT+CGATT=1"EOS, "OK"};
 800587a:	4b1a      	ldr	r3, [pc, #104]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 800587c:	4a22      	ldr	r2, [pc, #136]	; (8005908 <atc_InitCmdRespTable+0x10c>)
 800587e:	3340      	adds	r3, #64	; 0x40
 8005880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005884:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_NW_SCAN_AVAIL] = (atc_lookUpTbl_t){"AT+COPS=?"EOS, "+COPS:"};
 8005888:	4b16      	ldr	r3, [pc, #88]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 800588a:	4a20      	ldr	r2, [pc, #128]	; (800590c <atc_InitCmdRespTable+0x110>)
 800588c:	3348      	adds	r3, #72	; 0x48
 800588e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005892:	e883 0003 	stmia.w	r3, {r0, r1}
	/* GPS related command */

	/* Sleep mode related command */

	/* SIM card related command */
	lookUpTbl[ATC_SIM_CHANNEL_CHECK] = (atc_lookUpTbl_t){"AT^SIMSWAP?"EOS, "^SIMSWAP:"};
 8005896:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <atc_InitCmdRespTable+0x114>)
 800589a:	3350      	adds	r3, #80	; 0x50
 800589c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058a0:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_SIM_SWAP_ESIM] = (atc_lookUpTbl_t){"AT^SIMSWAP=0"EOS, "OK"};
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 80058a6:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <atc_InitCmdRespTable+0x118>)
 80058a8:	3358      	adds	r3, #88	; 0x58
 80058aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058ae:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_SIM_SWAP_EXT_SIM] = (atc_lookUpTbl_t){"AT^SIMSWAP=1"EOS, "OK"};
 80058b2:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 80058b4:	4a18      	ldr	r2, [pc, #96]	; (8005918 <atc_InitCmdRespTable+0x11c>)
 80058b6:	3360      	adds	r3, #96	; 0x60
 80058b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058bc:	e883 0003 	stmia.w	r3, {r0, r1}

	/* Modem specific command */
	lookUpTbl[ATC_CAVLI_HUBBLE_REG_STATUS] = (atc_lookUpTbl_t){"AT+HUBBLEREG?"EOS, "+HUBBLEREG:"};
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <atc_InitCmdRespTable+0x120>)
 80058c4:	3368      	adds	r3, #104	; 0x68
 80058c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058ca:	e883 0003 	stmia.w	r3, {r0, r1}
	lookUpTbl[ATC_CAVLI_REBOOT] = (atc_lookUpTbl_t){"AT+TRB?"EOS, "OK"};
 80058ce:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <atc_InitCmdRespTable+0xe8>)
 80058d0:	4a13      	ldr	r2, [pc, #76]	; (8005920 <atc_InitCmdRespTable+0x124>)
 80058d2:	3370      	adds	r3, #112	; 0x70
 80058d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058d8:	e883 0003 	stmia.w	r3, {r0, r1}

	/* User defined command*/

}
 80058dc:	bf00      	nop
 80058de:	3778      	adds	r7, #120	; 0x78
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20004a74 	.word	0x20004a74
 80058e8:	08006d84 	.word	0x08006d84
 80058ec:	08006d98 	.word	0x08006d98
 80058f0:	08006da8 	.word	0x08006da8
 80058f4:	08006db8 	.word	0x08006db8
 80058f8:	08006dd4 	.word	0x08006dd4
 80058fc:	08006df0 	.word	0x08006df0
 8005900:	08006e0c 	.word	0x08006e0c
 8005904:	08006e24 	.word	0x08006e24
 8005908:	08006e3c 	.word	0x08006e3c
 800590c:	08006e54 	.word	0x08006e54
 8005910:	08006e78 	.word	0x08006e78
 8005914:	08006e90 	.word	0x08006e90
 8005918:	08006ea8 	.word	0x08006ea8
 800591c:	08006ed0 	.word	0x08006ed0
 8005920:	08006ee4 	.word	0x08006ee4

08005924 <SendCmd>:

static port_uart_fnStatus_t SendCmd(port_uart_handle_t *handle, uint8_t *txBuff, uint16_t len, uint16_t timeoutMs)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4611      	mov	r1, r2
 8005930:	461a      	mov	r2, r3
 8005932:	460b      	mov	r3, r1
 8005934:	80fb      	strh	r3, [r7, #6]
 8005936:	4613      	mov	r3, r2
 8005938:	80bb      	strh	r3, [r7, #4]
	ClrFlags(handle);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff ff30 	bl	80057a0 <ClrFlags>
	port_uart_fnStatus_t ret = PORT_UART_FN_STATUS_ERR;
 8005940:	23fe      	movs	r3, #254	; 0xfe
 8005942:	75fb      	strb	r3, [r7, #23]
	ret = port_uart_Transmit(handle, txBuff, len);
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	461a      	mov	r2, r3
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f9a0 	bl	8005c90 <port_uart_Transmit>
 8005950:	4603      	mov	r3, r0
 8005952:	75fb      	strb	r3, [r7, #23]
	VERIFY_AND_RETURN(ret, ret, __func__, __LINE__);
 8005954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <SendCmd+0x4c>
 800595c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005960:	2278      	movs	r2, #120	; 0x78
 8005962:	4918      	ldr	r1, [pc, #96]	; (80059c4 <SendCmd+0xa0>)
 8005964:	4818      	ldr	r0, [pc, #96]	; (80059c8 <SendCmd+0xa4>)
 8005966:	f000 fab1 	bl	8005ecc <iprintf>
 800596a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800596e:	e025      	b.n	80059bc <SendCmd+0x98>

	uint32_t t0 = HAL_GetTick();
 8005970:	f7fb f8fa 	bl	8000b68 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]
	if(handle == &gsmHandle){
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4a14      	ldr	r2, [pc, #80]	; (80059cc <SendCmd+0xa8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d11c      	bne.n	80059b8 <SendCmd+0x94>
		while(((HAL_GetTick() - t0) < timeoutMs )&& (gsmUartInfo.cbType == PORT_UART_CB_NONE));
 800597e:	bf00      	nop
 8005980:	f7fb f8f2 	bl	8000b68 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad2      	subs	r2, r2, r3
 800598a:	88bb      	ldrh	r3, [r7, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d203      	bcs.n	8005998 <SendCmd+0x74>
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <SendCmd+0xac>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f3      	beq.n	8005980 <SendCmd+0x5c>
		if(gsmUartInfo.cbType == PORT_UART_TX_CMPLT){
 8005998:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <SendCmd+0xac>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d102      	bne.n	80059a6 <SendCmd+0x82>
			ret = PORT_UART_FN_STATUS_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	75fb      	strb	r3, [r7, #23]
 80059a4:	e008      	b.n	80059b8 <SendCmd+0x94>
		}else if(gsmUartInfo.cbType == PORT_UART_XFER_ERR){
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <SendCmd+0xac>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d102      	bne.n	80059b4 <SendCmd+0x90>
			ret = PORT_UART_FN_STATUS_ERR;
 80059ae:	23fe      	movs	r3, #254	; 0xfe
 80059b0:	75fb      	strb	r3, [r7, #23]
 80059b2:	e001      	b.n	80059b8 <SendCmd+0x94>
		}else{
			ret = PORT_UART_FN_STATUS_BUSY;
 80059b4:	2301      	movs	r3, #1
 80059b6:	75fb      	strb	r3, [r7, #23]
		}
	}
	return ret;
 80059b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	08006f68 	.word	0x08006f68
 80059c8:	08006eec 	.word	0x08006eec
 80059cc:	20004a2c 	.word	0x20004a2c
 80059d0:	20004aec 	.word	0x20004aec

080059d4 <RecvCmd>:

static port_uart_fnStatus_t RecvCmd(port_uart_handle_t *handle, uint8_t *rxBuff, uint16_t buffSize, uint16_t timeoutMs)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4611      	mov	r1, r2
 80059e0:	461a      	mov	r2, r3
 80059e2:	460b      	mov	r3, r1
 80059e4:	80fb      	strh	r3, [r7, #6]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80bb      	strh	r3, [r7, #4]
	ClrFlags(handle);
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff fed8 	bl	80057a0 <ClrFlags>
	port_uart_fnStatus_t ret = PORT_UART_FN_STATUS_ERR;
 80059f0:	23fe      	movs	r3, #254	; 0xfe
 80059f2:	75fb      	strb	r3, [r7, #23]
	ret = port_uart_Receive(handle, rxBuff, buffSize);
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	461a      	mov	r2, r3
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f976 	bl	8005cec <port_uart_Receive>
 8005a00:	4603      	mov	r3, r0
 8005a02:	75fb      	strb	r3, [r7, #23]
	VERIFY_AND_RETURN(ret, ret, __func__, __LINE__);
 8005a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d009      	beq.n	8005a20 <RecvCmd+0x4c>
 8005a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a10:	228d      	movs	r2, #141	; 0x8d
 8005a12:	4918      	ldr	r1, [pc, #96]	; (8005a74 <RecvCmd+0xa0>)
 8005a14:	4818      	ldr	r0, [pc, #96]	; (8005a78 <RecvCmd+0xa4>)
 8005a16:	f000 fa59 	bl	8005ecc <iprintf>
 8005a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a1e:	e025      	b.n	8005a6c <RecvCmd+0x98>

	uint32_t t0 = HAL_GetTick();
 8005a20:	f7fb f8a2 	bl	8000b68 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]
	if(handle == &gsmHandle){
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4a14      	ldr	r2, [pc, #80]	; (8005a7c <RecvCmd+0xa8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d11c      	bne.n	8005a68 <RecvCmd+0x94>
		while(((HAL_GetTick() - t0) < timeoutMs) && (gsmUartInfo.cbType == PORT_UART_CB_NONE));
 8005a2e:	bf00      	nop
 8005a30:	f7fb f89a 	bl	8000b68 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	88bb      	ldrh	r3, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d203      	bcs.n	8005a48 <RecvCmd+0x74>
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <RecvCmd+0xac>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f3      	beq.n	8005a30 <RecvCmd+0x5c>
		if(gsmUartInfo.cbType == PORT_UART_RX_CMPLT){
 8005a48:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <RecvCmd+0xac>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d102      	bne.n	8005a56 <RecvCmd+0x82>
			ret = PORT_UART_FN_STATUS_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	75fb      	strb	r3, [r7, #23]
 8005a54:	e008      	b.n	8005a68 <RecvCmd+0x94>
		}else if(gsmUartInfo.cbType == PORT_UART_XFER_ERR){
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <RecvCmd+0xac>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d102      	bne.n	8005a64 <RecvCmd+0x90>
			ret = PORT_UART_FN_STATUS_ERR;
 8005a5e:	23fe      	movs	r3, #254	; 0xfe
 8005a60:	75fb      	strb	r3, [r7, #23]
 8005a62:	e001      	b.n	8005a68 <RecvCmd+0x94>
		}else{
			ret = PORT_UART_FN_STATUS_BUSY;
 8005a64:	2301      	movs	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]
		}
	}
	return ret;
 8005a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	08006f70 	.word	0x08006f70
 8005a78:	08006eec 	.word	0x08006eec
 8005a7c:	20004a2c 	.word	0x20004a2c
 8005a80:	20004aec 	.word	0x20004aec

08005a84 <atc_Init>:

int8_t atc_Init(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
	port_uart_fnStatus_t ret = port_uart_Init(&gsmHandle);
 8005a8a:	4811      	ldr	r0, [pc, #68]	; (8005ad0 <atc_Init+0x4c>)
 8005a8c:	f000 f8bc 	bl	8005c08 <port_uart_Init>
 8005a90:	4603      	mov	r3, r0
 8005a92:	71fb      	strb	r3, [r7, #7]
	printf("port uart ret = %d\r\n", ret);
 8005a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	480e      	ldr	r0, [pc, #56]	; (8005ad4 <atc_Init+0x50>)
 8005a9c:	f000 fa16 	bl	8005ecc <iprintf>
	VERIFY_AND_RETURN(ret, -1, __func__, __LINE__);
 8005aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <atc_Init+0x38>
 8005aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aac:	22a1      	movs	r2, #161	; 0xa1
 8005aae:	490a      	ldr	r1, [pc, #40]	; (8005ad8 <atc_Init+0x54>)
 8005ab0:	480a      	ldr	r0, [pc, #40]	; (8005adc <atc_Init+0x58>)
 8005ab2:	f000 fa0b 	bl	8005ecc <iprintf>
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	e005      	b.n	8005ac8 <atc_Init+0x44>
	//TODO same for GPS uart

	memset(&gsmUartInfo, 0, sizeof(uartInfo_t));
 8005abc:	2202      	movs	r2, #2
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4807      	ldr	r0, [pc, #28]	; (8005ae0 <atc_Init+0x5c>)
 8005ac2:	f000 fb49 	bl	8006158 <memset>
	//TODO same for GPS uart
	return 0;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20004a2c 	.word	0x20004a2c
 8005ad4:	08006f04 	.word	0x08006f04
 8005ad8:	08006f78 	.word	0x08006f78
 8005adc:	08006eec 	.word	0x08006eec
 8005ae0:	20004aec 	.word	0x20004aec

08005ae4 <atc_Test>:

atc_fnStatus_t atc_Test(atc_module_t module, atc_cmd_t cmd)
{
 8005ae4:	b590      	push	{r4, r7, lr}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	460a      	mov	r2, r1
 8005aee:	71fb      	strb	r3, [r7, #7]
 8005af0:	4613      	mov	r3, r2
 8005af2:	71bb      	strb	r3, [r7, #6]
	port_uart_fnStatus_t ret = PORT_UART_FN_STATUS_ERR;
 8005af4:	23fe      	movs	r3, #254	; 0xfe
 8005af6:	75fb      	strb	r3, [r7, #23]
	if(ATC_LTE_MODULE == module){
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d151      	bne.n	8005ba2 <atc_Test+0xbe>
		ret = SendCmd(&gsmHandle, (uint8_t*)lookUpTbl[ATC_TEST].cmd, strlen(lookUpTbl[ATC_TEST].cmd), DEF_TIMEOUT_MS);
 8005afe:	4b2b      	ldr	r3, [pc, #172]	; (8005bac <atc_Test+0xc8>)
 8005b00:	681c      	ldr	r4, [r3, #0]
 8005b02:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <atc_Test+0xc8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fa fb6a 	bl	80001e0 <strlen>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	f242 7310 	movw	r3, #10000	; 0x2710
 8005b14:	4621      	mov	r1, r4
 8005b16:	4826      	ldr	r0, [pc, #152]	; (8005bb0 <atc_Test+0xcc>)
 8005b18:	f7ff ff04 	bl	8005924 <SendCmd>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	75fb      	strb	r3, [r7, #23]
		VERIFY_AND_RETURN(ret, ATC_FN_STATUS_FAIL, __func__, __LINE__);
 8005b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <atc_Test+0x58>
 8005b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b2c:	22ae      	movs	r2, #174	; 0xae
 8005b2e:	4921      	ldr	r1, [pc, #132]	; (8005bb4 <atc_Test+0xd0>)
 8005b30:	4821      	ldr	r0, [pc, #132]	; (8005bb8 <atc_Test+0xd4>)
 8005b32:	f000 f9cb 	bl	8005ecc <iprintf>
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	e033      	b.n	8005ba4 <atc_Test+0xc0>
		uint8_t rxBuff[10];
		memset(rxBuff, 0, sizeof(rxBuff));
 8005b3c:	f107 030c 	add.w	r3, r7, #12
 8005b40:	220a      	movs	r2, #10
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fb07 	bl	8006158 <memset>
		ret = RecvCmd(&gsmHandle, rxBuff, sizeof(rxBuff)-1, DEF_TIMEOUT_MS);
 8005b4a:	f107 010c 	add.w	r1, r7, #12
 8005b4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005b52:	2209      	movs	r2, #9
 8005b54:	4816      	ldr	r0, [pc, #88]	; (8005bb0 <atc_Test+0xcc>)
 8005b56:	f7ff ff3d 	bl	80059d4 <RecvCmd>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75fb      	strb	r3, [r7, #23]
		VERIFY_AND_RETURN(ret, ATC_FN_STATUS_FAIL, __func__, __LINE__);
 8005b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <atc_Test+0x96>
 8005b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b6a:	22b2      	movs	r2, #178	; 0xb2
 8005b6c:	4911      	ldr	r1, [pc, #68]	; (8005bb4 <atc_Test+0xd0>)
 8005b6e:	4812      	ldr	r0, [pc, #72]	; (8005bb8 <atc_Test+0xd4>)
 8005b70:	f000 f9ac 	bl	8005ecc <iprintf>
 8005b74:	f04f 33ff 	mov.w	r3, #4294967295
 8005b78:	e014      	b.n	8005ba4 <atc_Test+0xc0>
		if(strncmp((char*)rxBuff, lookUpTbl[ATC_TEST].response, strlen(lookUpTbl[ATC_TEST].response)) != 0){
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <atc_Test+0xc8>)
 8005b7c:	685c      	ldr	r4, [r3, #4]
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <atc_Test+0xc8>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fa fb2c 	bl	80001e0 <strlen>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	f107 030c 	add.w	r3, r7, #12
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fae9 	bl	8006168 <strncmp>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <atc_Test+0xbe>
			return ATC_FN_STATUS_FAIL;
 8005b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba0:	e000      	b.n	8005ba4 <atc_Test+0xc0>
		}
	}
	return ATC_FN_STATUS_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd90      	pop	{r4, r7, pc}
 8005bac:	20004a74 	.word	0x20004a74
 8005bb0:	20004a2c 	.word	0x20004a2c
 8005bb4:	08006f84 	.word	0x08006f84
 8005bb8:	08006eec 	.word	0x08006eec

08005bbc <HAL_UART_TxCpltCallback>:
	;
}

#if PORT_UART_MODE_INTERRUPT
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	port_uart_Callback(PORT_UART_TX_CMPLT, huart);
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	f7ff fe00 	bl	80057cc <port_uart_Callback>
}
 8005bcc:	bf00      	nop
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	807b      	strh	r3, [r7, #2]
	port_uart_Callback(PORT_UART_RX_CMPLT, huart);
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	2002      	movs	r0, #2
 8005be4:	f7ff fdf2 	bl	80057cc <port_uart_Callback>
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	port_uart_Callback(PORT_UART_XFER_ERR, huart);
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	2003      	movs	r0, #3
 8005bfc:	f7ff fde6 	bl	80057cc <port_uart_Callback>
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <port_uart_Init>:
#endif

port_uart_fnStatus_t port_uart_Init(port_uart_handle_t *uartHndl)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	uartHndl->Init.BaudRate = 115200;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c16:	605a      	str	r2, [r3, #4]
	uartHndl->Init.WordLength = UART_WORDLENGTH_8B;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	609a      	str	r2, [r3, #8]
	uartHndl->Init.StopBits = UART_STOPBITS_1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	60da      	str	r2, [r3, #12]
	uartHndl->Init.Parity = UART_PARITY_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	611a      	str	r2, [r3, #16]
	uartHndl->Init.Mode = UART_MODE_TX_RX;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	220c      	movs	r2, #12
 8005c2e:	615a      	str	r2, [r3, #20]
	uartHndl->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	619a      	str	r2, [r3, #24]
	uartHndl->Init.OverSampling = UART_OVERSAMPLING_16;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	61da      	str	r2, [r3, #28]

	HAL_StatusTypeDef ret = HAL_UART_Init(uartHndl);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fb ff1f 	bl	8001a80 <HAL_UART_Init>
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]
	printf("hal ret = %d\r\n", ret);
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4810      	ldr	r0, [pc, #64]	; (8005c8c <port_uart_Init+0x84>)
 8005c4c:	f000 f93e 	bl	8005ecc <iprintf>
	switch(ret){
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d814      	bhi.n	8005c80 <port_uart_Init+0x78>
 8005c56:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <port_uart_Init+0x54>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005c6d 	.word	0x08005c6d
 8005c60:	08005c7b 	.word	0x08005c7b
 8005c64:	08005c71 	.word	0x08005c71
 8005c68:	08005c75 	.word	0x08005c75
		case HAL_OK:
			return PORT_UART_FN_STATUS_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e009      	b.n	8005c84 <port_uart_Init+0x7c>
		case HAL_BUSY:
			return PORT_UART_FN_STATUS_BUSY;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e007      	b.n	8005c84 <port_uart_Init+0x7c>
		case HAL_TIMEOUT:
			return PORT_UART_FN_STATUS_TIMEOUT;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
 8005c78:	e004      	b.n	8005c84 <port_uart_Init+0x7c>
		case HAL_ERROR:
			return PORT_UART_FN_STATUS_ERR;
 8005c7a:	f06f 0301 	mvn.w	r3, #1
 8005c7e:	e001      	b.n	8005c84 <port_uart_Init+0x7c>
		default:
			return PORT_UART_FN_STATUS_ERR;
 8005c80:	f06f 0301 	mvn.w	r3, #1
	}
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	08006f1c 	.word	0x08006f1c

08005c90 <port_uart_Transmit>:

#if PORT_UART_MODE_INTERRUPT
port_uart_fnStatus_t port_uart_Transmit(port_uart_handle_t *uartHndl, uint8_t *txBuff, uint16_t txLen)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_UART_Transmit_IT(uartHndl, txBuff, txLen);
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7fb ffc6 	bl	8001c36 <HAL_UART_Transmit_IT>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75fb      	strb	r3, [r7, #23]
	switch(ret){
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d815      	bhi.n	8005ce0 <port_uart_Transmit+0x50>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <port_uart_Transmit+0x2c>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005ccd 	.word	0x08005ccd
 8005cc0:	08005cdb 	.word	0x08005cdb
 8005cc4:	08005cd1 	.word	0x08005cd1
 8005cc8:	08005cd5 	.word	0x08005cd5
		case HAL_OK:
			return PORT_UART_FN_STATUS_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e009      	b.n	8005ce4 <port_uart_Transmit+0x54>
		case HAL_BUSY:
			return PORT_UART_FN_STATUS_BUSY;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e007      	b.n	8005ce4 <port_uart_Transmit+0x54>
		case HAL_TIMEOUT:
			return PORT_UART_FN_STATUS_TIMEOUT;
 8005cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd8:	e004      	b.n	8005ce4 <port_uart_Transmit+0x54>
		case HAL_ERROR:
			return PORT_UART_FN_STATUS_ERR;
 8005cda:	f06f 0301 	mvn.w	r3, #1
 8005cde:	e001      	b.n	8005ce4 <port_uart_Transmit+0x54>
		default:
			return PORT_UART_FN_STATUS_ERR;
 8005ce0:	f06f 0301 	mvn.w	r3, #1
	}
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <port_uart_Receive>:

port_uart_fnStatus_t port_uart_Receive(port_uart_handle_t *uartHndl, uint8_t *rxBuff, uint16_t buffSize)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]
//	HAL_StatusTypeDef ret = HAL_UART_Receive_IT(uartHndl, rxBuff, buffSize);
	HAL_StatusTypeDef ret = HAL_UARTEx_ReceiveToIdle_IT(uartHndl, rxBuff, buffSize);
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7fb ffce 	bl	8001ca2 <HAL_UARTEx_ReceiveToIdle_IT>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]
	switch(ret){
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d815      	bhi.n	8005d3c <port_uart_Receive+0x50>
 8005d10:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <port_uart_Receive+0x2c>)
 8005d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d16:	bf00      	nop
 8005d18:	08005d29 	.word	0x08005d29
 8005d1c:	08005d37 	.word	0x08005d37
 8005d20:	08005d2d 	.word	0x08005d2d
 8005d24:	08005d31 	.word	0x08005d31
		case HAL_OK:
			return PORT_UART_FN_STATUS_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e009      	b.n	8005d40 <port_uart_Receive+0x54>
		case HAL_BUSY:
			return PORT_UART_FN_STATUS_BUSY;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e007      	b.n	8005d40 <port_uart_Receive+0x54>
		case HAL_TIMEOUT:
			return PORT_UART_FN_STATUS_TIMEOUT;
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	e004      	b.n	8005d40 <port_uart_Receive+0x54>
		case HAL_ERROR:
			return PORT_UART_FN_STATUS_ERR;
 8005d36:	f06f 0301 	mvn.w	r3, #1
 8005d3a:	e001      	b.n	8005d40 <port_uart_Receive+0x54>
		default:
			return PORT_UART_FN_STATUS_ERR;
 8005d3c:	f06f 0301 	mvn.w	r3, #1
	}
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <std>:
 8005d48:	2300      	movs	r3, #0
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d56:	6083      	str	r3, [r0, #8]
 8005d58:	8181      	strh	r1, [r0, #12]
 8005d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d5c:	81c2      	strh	r2, [r0, #14]
 8005d5e:	6183      	str	r3, [r0, #24]
 8005d60:	4619      	mov	r1, r3
 8005d62:	2208      	movs	r2, #8
 8005d64:	305c      	adds	r0, #92	; 0x5c
 8005d66:	f000 f9f7 	bl	8006158 <memset>
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <std+0x58>)
 8005d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <std+0x5c>)
 8005d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d72:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <std+0x60>)
 8005d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <std+0x64>)
 8005d78:	6323      	str	r3, [r4, #48]	; 0x30
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <std+0x68>)
 8005d7c:	6224      	str	r4, [r4, #32]
 8005d7e:	429c      	cmp	r4, r3
 8005d80:	d006      	beq.n	8005d90 <std+0x48>
 8005d82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d86:	4294      	cmp	r4, r2
 8005d88:	d002      	beq.n	8005d90 <std+0x48>
 8005d8a:	33d0      	adds	r3, #208	; 0xd0
 8005d8c:	429c      	cmp	r4, r3
 8005d8e:	d105      	bne.n	8005d9c <std+0x54>
 8005d90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	f000 ba68 	b.w	800626c <__retarget_lock_init_recursive>
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	bf00      	nop
 8005da0:	08005fa9 	.word	0x08005fa9
 8005da4:	08005fcb 	.word	0x08005fcb
 8005da8:	08006003 	.word	0x08006003
 8005dac:	08006027 	.word	0x08006027
 8005db0:	20004af0 	.word	0x20004af0

08005db4 <stdio_exit_handler>:
 8005db4:	4a02      	ldr	r2, [pc, #8]	; (8005dc0 <stdio_exit_handler+0xc>)
 8005db6:	4903      	ldr	r1, [pc, #12]	; (8005dc4 <stdio_exit_handler+0x10>)
 8005db8:	4803      	ldr	r0, [pc, #12]	; (8005dc8 <stdio_exit_handler+0x14>)
 8005dba:	f000 b869 	b.w	8005e90 <_fwalk_sglue>
 8005dbe:	bf00      	nop
 8005dc0:	20000010 	.word	0x20000010
 8005dc4:	08006b35 	.word	0x08006b35
 8005dc8:	2000001c 	.word	0x2000001c

08005dcc <cleanup_stdio>:
 8005dcc:	6841      	ldr	r1, [r0, #4]
 8005dce:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <cleanup_stdio+0x34>)
 8005dd0:	4299      	cmp	r1, r3
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	d001      	beq.n	8005ddc <cleanup_stdio+0x10>
 8005dd8:	f000 feac 	bl	8006b34 <_fflush_r>
 8005ddc:	68a1      	ldr	r1, [r4, #8]
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <cleanup_stdio+0x38>)
 8005de0:	4299      	cmp	r1, r3
 8005de2:	d002      	beq.n	8005dea <cleanup_stdio+0x1e>
 8005de4:	4620      	mov	r0, r4
 8005de6:	f000 fea5 	bl	8006b34 <_fflush_r>
 8005dea:	68e1      	ldr	r1, [r4, #12]
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <cleanup_stdio+0x3c>)
 8005dee:	4299      	cmp	r1, r3
 8005df0:	d004      	beq.n	8005dfc <cleanup_stdio+0x30>
 8005df2:	4620      	mov	r0, r4
 8005df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df8:	f000 be9c 	b.w	8006b34 <_fflush_r>
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	bf00      	nop
 8005e00:	20004af0 	.word	0x20004af0
 8005e04:	20004b58 	.word	0x20004b58
 8005e08:	20004bc0 	.word	0x20004bc0

08005e0c <global_stdio_init.part.0>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <global_stdio_init.part.0+0x30>)
 8005e10:	4c0b      	ldr	r4, [pc, #44]	; (8005e40 <global_stdio_init.part.0+0x34>)
 8005e12:	4a0c      	ldr	r2, [pc, #48]	; (8005e44 <global_stdio_init.part.0+0x38>)
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	4620      	mov	r0, r4
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2104      	movs	r1, #4
 8005e1c:	f7ff ff94 	bl	8005d48 <std>
 8005e20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e24:	2201      	movs	r2, #1
 8005e26:	2109      	movs	r1, #9
 8005e28:	f7ff ff8e 	bl	8005d48 <std>
 8005e2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e30:	2202      	movs	r2, #2
 8005e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e36:	2112      	movs	r1, #18
 8005e38:	f7ff bf86 	b.w	8005d48 <std>
 8005e3c:	20004c28 	.word	0x20004c28
 8005e40:	20004af0 	.word	0x20004af0
 8005e44:	08005db5 	.word	0x08005db5

08005e48 <__sfp_lock_acquire>:
 8005e48:	4801      	ldr	r0, [pc, #4]	; (8005e50 <__sfp_lock_acquire+0x8>)
 8005e4a:	f000 ba10 	b.w	800626e <__retarget_lock_acquire_recursive>
 8005e4e:	bf00      	nop
 8005e50:	20004c31 	.word	0x20004c31

08005e54 <__sfp_lock_release>:
 8005e54:	4801      	ldr	r0, [pc, #4]	; (8005e5c <__sfp_lock_release+0x8>)
 8005e56:	f000 ba0b 	b.w	8006270 <__retarget_lock_release_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	20004c31 	.word	0x20004c31

08005e60 <__sinit>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4604      	mov	r4, r0
 8005e64:	f7ff fff0 	bl	8005e48 <__sfp_lock_acquire>
 8005e68:	6a23      	ldr	r3, [r4, #32]
 8005e6a:	b11b      	cbz	r3, 8005e74 <__sinit+0x14>
 8005e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e70:	f7ff bff0 	b.w	8005e54 <__sfp_lock_release>
 8005e74:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <__sinit+0x28>)
 8005e76:	6223      	str	r3, [r4, #32]
 8005e78:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <__sinit+0x2c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f5      	bne.n	8005e6c <__sinit+0xc>
 8005e80:	f7ff ffc4 	bl	8005e0c <global_stdio_init.part.0>
 8005e84:	e7f2      	b.n	8005e6c <__sinit+0xc>
 8005e86:	bf00      	nop
 8005e88:	08005dcd 	.word	0x08005dcd
 8005e8c:	20004c28 	.word	0x20004c28

08005e90 <_fwalk_sglue>:
 8005e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e94:	4607      	mov	r7, r0
 8005e96:	4688      	mov	r8, r1
 8005e98:	4614      	mov	r4, r2
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ea4:	d505      	bpl.n	8005eb2 <_fwalk_sglue+0x22>
 8005ea6:	6824      	ldr	r4, [r4, #0]
 8005ea8:	2c00      	cmp	r4, #0
 8005eaa:	d1f7      	bne.n	8005e9c <_fwalk_sglue+0xc>
 8005eac:	4630      	mov	r0, r6
 8005eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb2:	89ab      	ldrh	r3, [r5, #12]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d907      	bls.n	8005ec8 <_fwalk_sglue+0x38>
 8005eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	d003      	beq.n	8005ec8 <_fwalk_sglue+0x38>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	47c0      	blx	r8
 8005ec6:	4306      	orrs	r6, r0
 8005ec8:	3568      	adds	r5, #104	; 0x68
 8005eca:	e7e9      	b.n	8005ea0 <_fwalk_sglue+0x10>

08005ecc <iprintf>:
 8005ecc:	b40f      	push	{r0, r1, r2, r3}
 8005ece:	b507      	push	{r0, r1, r2, lr}
 8005ed0:	4906      	ldr	r1, [pc, #24]	; (8005eec <iprintf+0x20>)
 8005ed2:	ab04      	add	r3, sp, #16
 8005ed4:	6808      	ldr	r0, [r1, #0]
 8005ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eda:	6881      	ldr	r1, [r0, #8]
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	f000 faf9 	bl	80064d4 <_vfiprintf_r>
 8005ee2:	b003      	add	sp, #12
 8005ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ee8:	b004      	add	sp, #16
 8005eea:	4770      	bx	lr
 8005eec:	20000068 	.word	0x20000068

08005ef0 <_puts_r>:
 8005ef0:	6a03      	ldr	r3, [r0, #32]
 8005ef2:	b570      	push	{r4, r5, r6, lr}
 8005ef4:	6884      	ldr	r4, [r0, #8]
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	460e      	mov	r6, r1
 8005efa:	b90b      	cbnz	r3, 8005f00 <_puts_r+0x10>
 8005efc:	f7ff ffb0 	bl	8005e60 <__sinit>
 8005f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f02:	07db      	lsls	r3, r3, #31
 8005f04:	d405      	bmi.n	8005f12 <_puts_r+0x22>
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	0598      	lsls	r0, r3, #22
 8005f0a:	d402      	bmi.n	8005f12 <_puts_r+0x22>
 8005f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f0e:	f000 f9ae 	bl	800626e <__retarget_lock_acquire_recursive>
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	0719      	lsls	r1, r3, #28
 8005f16:	d513      	bpl.n	8005f40 <_puts_r+0x50>
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	b18b      	cbz	r3, 8005f40 <_puts_r+0x50>
 8005f1c:	3e01      	subs	r6, #1
 8005f1e:	68a3      	ldr	r3, [r4, #8]
 8005f20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f24:	3b01      	subs	r3, #1
 8005f26:	60a3      	str	r3, [r4, #8]
 8005f28:	b9e9      	cbnz	r1, 8005f66 <_puts_r+0x76>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	da2e      	bge.n	8005f8c <_puts_r+0x9c>
 8005f2e:	4622      	mov	r2, r4
 8005f30:	210a      	movs	r1, #10
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 f87b 	bl	800602e <__swbuf_r>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d007      	beq.n	8005f4c <_puts_r+0x5c>
 8005f3c:	250a      	movs	r5, #10
 8005f3e:	e007      	b.n	8005f50 <_puts_r+0x60>
 8005f40:	4621      	mov	r1, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 f8b0 	bl	80060a8 <__swsetup_r>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d0e7      	beq.n	8005f1c <_puts_r+0x2c>
 8005f4c:	f04f 35ff 	mov.w	r5, #4294967295
 8005f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f52:	07da      	lsls	r2, r3, #31
 8005f54:	d405      	bmi.n	8005f62 <_puts_r+0x72>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	059b      	lsls	r3, r3, #22
 8005f5a:	d402      	bmi.n	8005f62 <_puts_r+0x72>
 8005f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f5e:	f000 f987 	bl	8006270 <__retarget_lock_release_recursive>
 8005f62:	4628      	mov	r0, r5
 8005f64:	bd70      	pop	{r4, r5, r6, pc}
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	da04      	bge.n	8005f74 <_puts_r+0x84>
 8005f6a:	69a2      	ldr	r2, [r4, #24]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	dc06      	bgt.n	8005f7e <_puts_r+0x8e>
 8005f70:	290a      	cmp	r1, #10
 8005f72:	d004      	beq.n	8005f7e <_puts_r+0x8e>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	6022      	str	r2, [r4, #0]
 8005f7a:	7019      	strb	r1, [r3, #0]
 8005f7c:	e7cf      	b.n	8005f1e <_puts_r+0x2e>
 8005f7e:	4622      	mov	r2, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 f854 	bl	800602e <__swbuf_r>
 8005f86:	3001      	adds	r0, #1
 8005f88:	d1c9      	bne.n	8005f1e <_puts_r+0x2e>
 8005f8a:	e7df      	b.n	8005f4c <_puts_r+0x5c>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	250a      	movs	r5, #10
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	6022      	str	r2, [r4, #0]
 8005f94:	701d      	strb	r5, [r3, #0]
 8005f96:	e7db      	b.n	8005f50 <_puts_r+0x60>

08005f98 <puts>:
 8005f98:	4b02      	ldr	r3, [pc, #8]	; (8005fa4 <puts+0xc>)
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	f7ff bfa7 	b.w	8005ef0 <_puts_r>
 8005fa2:	bf00      	nop
 8005fa4:	20000068 	.word	0x20000068

08005fa8 <__sread>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	460c      	mov	r4, r1
 8005fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb0:	f000 f90e 	bl	80061d0 <_read_r>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	bfab      	itete	ge
 8005fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fba:	89a3      	ldrhlt	r3, [r4, #12]
 8005fbc:	181b      	addge	r3, r3, r0
 8005fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fc2:	bfac      	ite	ge
 8005fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fc6:	81a3      	strhlt	r3, [r4, #12]
 8005fc8:	bd10      	pop	{r4, pc}

08005fca <__swrite>:
 8005fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fce:	461f      	mov	r7, r3
 8005fd0:	898b      	ldrh	r3, [r1, #12]
 8005fd2:	05db      	lsls	r3, r3, #23
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	4616      	mov	r6, r2
 8005fda:	d505      	bpl.n	8005fe8 <__swrite+0x1e>
 8005fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f000 f8e2 	bl	80061ac <_lseek_r>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	4632      	mov	r2, r6
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffe:	f000 b8f9 	b.w	80061f4 <_write_r>

08006002 <__sseek>:
 8006002:	b510      	push	{r4, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600a:	f000 f8cf 	bl	80061ac <_lseek_r>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	bf15      	itete	ne
 8006014:	6560      	strne	r0, [r4, #84]	; 0x54
 8006016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800601a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800601e:	81a3      	strheq	r3, [r4, #12]
 8006020:	bf18      	it	ne
 8006022:	81a3      	strhne	r3, [r4, #12]
 8006024:	bd10      	pop	{r4, pc}

08006026 <__sclose>:
 8006026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602a:	f000 b8af 	b.w	800618c <_close_r>

0800602e <__swbuf_r>:
 800602e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006030:	460e      	mov	r6, r1
 8006032:	4614      	mov	r4, r2
 8006034:	4605      	mov	r5, r0
 8006036:	b118      	cbz	r0, 8006040 <__swbuf_r+0x12>
 8006038:	6a03      	ldr	r3, [r0, #32]
 800603a:	b90b      	cbnz	r3, 8006040 <__swbuf_r+0x12>
 800603c:	f7ff ff10 	bl	8005e60 <__sinit>
 8006040:	69a3      	ldr	r3, [r4, #24]
 8006042:	60a3      	str	r3, [r4, #8]
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	071a      	lsls	r2, r3, #28
 8006048:	d525      	bpl.n	8006096 <__swbuf_r+0x68>
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	b31b      	cbz	r3, 8006096 <__swbuf_r+0x68>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	6922      	ldr	r2, [r4, #16]
 8006052:	1a98      	subs	r0, r3, r2
 8006054:	6963      	ldr	r3, [r4, #20]
 8006056:	b2f6      	uxtb	r6, r6
 8006058:	4283      	cmp	r3, r0
 800605a:	4637      	mov	r7, r6
 800605c:	dc04      	bgt.n	8006068 <__swbuf_r+0x3a>
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 fd67 	bl	8006b34 <_fflush_r>
 8006066:	b9e0      	cbnz	r0, 80060a2 <__swbuf_r+0x74>
 8006068:	68a3      	ldr	r3, [r4, #8]
 800606a:	3b01      	subs	r3, #1
 800606c:	60a3      	str	r3, [r4, #8]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	6022      	str	r2, [r4, #0]
 8006074:	701e      	strb	r6, [r3, #0]
 8006076:	6962      	ldr	r2, [r4, #20]
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	429a      	cmp	r2, r3
 800607c:	d004      	beq.n	8006088 <__swbuf_r+0x5a>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	07db      	lsls	r3, r3, #31
 8006082:	d506      	bpl.n	8006092 <__swbuf_r+0x64>
 8006084:	2e0a      	cmp	r6, #10
 8006086:	d104      	bne.n	8006092 <__swbuf_r+0x64>
 8006088:	4621      	mov	r1, r4
 800608a:	4628      	mov	r0, r5
 800608c:	f000 fd52 	bl	8006b34 <_fflush_r>
 8006090:	b938      	cbnz	r0, 80060a2 <__swbuf_r+0x74>
 8006092:	4638      	mov	r0, r7
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006096:	4621      	mov	r1, r4
 8006098:	4628      	mov	r0, r5
 800609a:	f000 f805 	bl	80060a8 <__swsetup_r>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d0d5      	beq.n	800604e <__swbuf_r+0x20>
 80060a2:	f04f 37ff 	mov.w	r7, #4294967295
 80060a6:	e7f4      	b.n	8006092 <__swbuf_r+0x64>

080060a8 <__swsetup_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <__swsetup_r+0xac>)
 80060ac:	4605      	mov	r5, r0
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	460c      	mov	r4, r1
 80060b2:	b118      	cbz	r0, 80060bc <__swsetup_r+0x14>
 80060b4:	6a03      	ldr	r3, [r0, #32]
 80060b6:	b90b      	cbnz	r3, 80060bc <__swsetup_r+0x14>
 80060b8:	f7ff fed2 	bl	8005e60 <__sinit>
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060c2:	0718      	lsls	r0, r3, #28
 80060c4:	d422      	bmi.n	800610c <__swsetup_r+0x64>
 80060c6:	06d9      	lsls	r1, r3, #27
 80060c8:	d407      	bmi.n	80060da <__swsetup_r+0x32>
 80060ca:	2309      	movs	r3, #9
 80060cc:	602b      	str	r3, [r5, #0]
 80060ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295
 80060d8:	e034      	b.n	8006144 <__swsetup_r+0x9c>
 80060da:	0758      	lsls	r0, r3, #29
 80060dc:	d512      	bpl.n	8006104 <__swsetup_r+0x5c>
 80060de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060e0:	b141      	cbz	r1, 80060f4 <__swsetup_r+0x4c>
 80060e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060e6:	4299      	cmp	r1, r3
 80060e8:	d002      	beq.n	80060f0 <__swsetup_r+0x48>
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 f8d0 	bl	8006290 <_free_r>
 80060f0:	2300      	movs	r3, #0
 80060f2:	6363      	str	r3, [r4, #52]	; 0x34
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060fa:	81a3      	strh	r3, [r4, #12]
 80060fc:	2300      	movs	r3, #0
 80060fe:	6063      	str	r3, [r4, #4]
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f043 0308 	orr.w	r3, r3, #8
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	b94b      	cbnz	r3, 8006124 <__swsetup_r+0x7c>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611a:	d003      	beq.n	8006124 <__swsetup_r+0x7c>
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fd56 	bl	8006bd0 <__smakebuf_r>
 8006124:	89a0      	ldrh	r0, [r4, #12]
 8006126:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800612a:	f010 0301 	ands.w	r3, r0, #1
 800612e:	d00a      	beq.n	8006146 <__swsetup_r+0x9e>
 8006130:	2300      	movs	r3, #0
 8006132:	60a3      	str	r3, [r4, #8]
 8006134:	6963      	ldr	r3, [r4, #20]
 8006136:	425b      	negs	r3, r3
 8006138:	61a3      	str	r3, [r4, #24]
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	b943      	cbnz	r3, 8006150 <__swsetup_r+0xa8>
 800613e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006142:	d1c4      	bne.n	80060ce <__swsetup_r+0x26>
 8006144:	bd38      	pop	{r3, r4, r5, pc}
 8006146:	0781      	lsls	r1, r0, #30
 8006148:	bf58      	it	pl
 800614a:	6963      	ldrpl	r3, [r4, #20]
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	e7f4      	b.n	800613a <__swsetup_r+0x92>
 8006150:	2000      	movs	r0, #0
 8006152:	e7f7      	b.n	8006144 <__swsetup_r+0x9c>
 8006154:	20000068 	.word	0x20000068

08006158 <memset>:
 8006158:	4402      	add	r2, r0
 800615a:	4603      	mov	r3, r0
 800615c:	4293      	cmp	r3, r2
 800615e:	d100      	bne.n	8006162 <memset+0xa>
 8006160:	4770      	bx	lr
 8006162:	f803 1b01 	strb.w	r1, [r3], #1
 8006166:	e7f9      	b.n	800615c <memset+0x4>

08006168 <strncmp>:
 8006168:	b510      	push	{r4, lr}
 800616a:	b16a      	cbz	r2, 8006188 <strncmp+0x20>
 800616c:	3901      	subs	r1, #1
 800616e:	1884      	adds	r4, r0, r2
 8006170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006174:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006178:	429a      	cmp	r2, r3
 800617a:	d103      	bne.n	8006184 <strncmp+0x1c>
 800617c:	42a0      	cmp	r0, r4
 800617e:	d001      	beq.n	8006184 <strncmp+0x1c>
 8006180:	2a00      	cmp	r2, #0
 8006182:	d1f5      	bne.n	8006170 <strncmp+0x8>
 8006184:	1ad0      	subs	r0, r2, r3
 8006186:	bd10      	pop	{r4, pc}
 8006188:	4610      	mov	r0, r2
 800618a:	e7fc      	b.n	8006186 <strncmp+0x1e>

0800618c <_close_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4d06      	ldr	r5, [pc, #24]	; (80061a8 <_close_r+0x1c>)
 8006190:	2300      	movs	r3, #0
 8006192:	4604      	mov	r4, r0
 8006194:	4608      	mov	r0, r1
 8006196:	602b      	str	r3, [r5, #0]
 8006198:	f7fa fbd9 	bl	800094e <_close>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d102      	bne.n	80061a6 <_close_r+0x1a>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	b103      	cbz	r3, 80061a6 <_close_r+0x1a>
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	20004c2c 	.word	0x20004c2c

080061ac <_lseek_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d07      	ldr	r5, [pc, #28]	; (80061cc <_lseek_r+0x20>)
 80061b0:	4604      	mov	r4, r0
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
 80061b6:	2200      	movs	r2, #0
 80061b8:	602a      	str	r2, [r5, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f7fa fbee 	bl	800099c <_lseek>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_lseek_r+0x1e>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_lseek_r+0x1e>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	20004c2c 	.word	0x20004c2c

080061d0 <_read_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	; (80061f0 <_read_r+0x20>)
 80061d4:	4604      	mov	r4, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	602a      	str	r2, [r5, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fa fb7c 	bl	80008dc <_read>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_read_r+0x1e>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_read_r+0x1e>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	20004c2c 	.word	0x20004c2c

080061f4 <_write_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4d07      	ldr	r5, [pc, #28]	; (8006214 <_write_r+0x20>)
 80061f8:	4604      	mov	r4, r0
 80061fa:	4608      	mov	r0, r1
 80061fc:	4611      	mov	r1, r2
 80061fe:	2200      	movs	r2, #0
 8006200:	602a      	str	r2, [r5, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	f7fa fb87 	bl	8000916 <_write>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_write_r+0x1e>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_write_r+0x1e>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	20004c2c 	.word	0x20004c2c

08006218 <__errno>:
 8006218:	4b01      	ldr	r3, [pc, #4]	; (8006220 <__errno+0x8>)
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20000068 	.word	0x20000068

08006224 <__libc_init_array>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	4d0d      	ldr	r5, [pc, #52]	; (800625c <__libc_init_array+0x38>)
 8006228:	4c0d      	ldr	r4, [pc, #52]	; (8006260 <__libc_init_array+0x3c>)
 800622a:	1b64      	subs	r4, r4, r5
 800622c:	10a4      	asrs	r4, r4, #2
 800622e:	2600      	movs	r6, #0
 8006230:	42a6      	cmp	r6, r4
 8006232:	d109      	bne.n	8006248 <__libc_init_array+0x24>
 8006234:	4d0b      	ldr	r5, [pc, #44]	; (8006264 <__libc_init_array+0x40>)
 8006236:	4c0c      	ldr	r4, [pc, #48]	; (8006268 <__libc_init_array+0x44>)
 8006238:	f000 fd38 	bl	8006cac <_init>
 800623c:	1b64      	subs	r4, r4, r5
 800623e:	10a4      	asrs	r4, r4, #2
 8006240:	2600      	movs	r6, #0
 8006242:	42a6      	cmp	r6, r4
 8006244:	d105      	bne.n	8006252 <__libc_init_array+0x2e>
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	f855 3b04 	ldr.w	r3, [r5], #4
 800624c:	4798      	blx	r3
 800624e:	3601      	adds	r6, #1
 8006250:	e7ee      	b.n	8006230 <__libc_init_array+0xc>
 8006252:	f855 3b04 	ldr.w	r3, [r5], #4
 8006256:	4798      	blx	r3
 8006258:	3601      	adds	r6, #1
 800625a:	e7f2      	b.n	8006242 <__libc_init_array+0x1e>
 800625c:	08006fc8 	.word	0x08006fc8
 8006260:	08006fc8 	.word	0x08006fc8
 8006264:	08006fc8 	.word	0x08006fc8
 8006268:	08006fcc 	.word	0x08006fcc

0800626c <__retarget_lock_init_recursive>:
 800626c:	4770      	bx	lr

0800626e <__retarget_lock_acquire_recursive>:
 800626e:	4770      	bx	lr

08006270 <__retarget_lock_release_recursive>:
 8006270:	4770      	bx	lr

08006272 <memcpy>:
 8006272:	440a      	add	r2, r1
 8006274:	4291      	cmp	r1, r2
 8006276:	f100 33ff 	add.w	r3, r0, #4294967295
 800627a:	d100      	bne.n	800627e <memcpy+0xc>
 800627c:	4770      	bx	lr
 800627e:	b510      	push	{r4, lr}
 8006280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006288:	4291      	cmp	r1, r2
 800628a:	d1f9      	bne.n	8006280 <memcpy+0xe>
 800628c:	bd10      	pop	{r4, pc}
	...

08006290 <_free_r>:
 8006290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006292:	2900      	cmp	r1, #0
 8006294:	d044      	beq.n	8006320 <_free_r+0x90>
 8006296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629a:	9001      	str	r0, [sp, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f1a1 0404 	sub.w	r4, r1, #4
 80062a2:	bfb8      	it	lt
 80062a4:	18e4      	addlt	r4, r4, r3
 80062a6:	f000 f8df 	bl	8006468 <__malloc_lock>
 80062aa:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <_free_r+0x94>)
 80062ac:	9801      	ldr	r0, [sp, #4]
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	b933      	cbnz	r3, 80062c0 <_free_r+0x30>
 80062b2:	6063      	str	r3, [r4, #4]
 80062b4:	6014      	str	r4, [r2, #0]
 80062b6:	b003      	add	sp, #12
 80062b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062bc:	f000 b8da 	b.w	8006474 <__malloc_unlock>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d908      	bls.n	80062d6 <_free_r+0x46>
 80062c4:	6825      	ldr	r5, [r4, #0]
 80062c6:	1961      	adds	r1, r4, r5
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf01      	itttt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	1949      	addeq	r1, r1, r5
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	e7ed      	b.n	80062b2 <_free_r+0x22>
 80062d6:	461a      	mov	r2, r3
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	b10b      	cbz	r3, 80062e0 <_free_r+0x50>
 80062dc:	42a3      	cmp	r3, r4
 80062de:	d9fa      	bls.n	80062d6 <_free_r+0x46>
 80062e0:	6811      	ldr	r1, [r2, #0]
 80062e2:	1855      	adds	r5, r2, r1
 80062e4:	42a5      	cmp	r5, r4
 80062e6:	d10b      	bne.n	8006300 <_free_r+0x70>
 80062e8:	6824      	ldr	r4, [r4, #0]
 80062ea:	4421      	add	r1, r4
 80062ec:	1854      	adds	r4, r2, r1
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	d1e0      	bne.n	80062b6 <_free_r+0x26>
 80062f4:	681c      	ldr	r4, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	6053      	str	r3, [r2, #4]
 80062fa:	440c      	add	r4, r1
 80062fc:	6014      	str	r4, [r2, #0]
 80062fe:	e7da      	b.n	80062b6 <_free_r+0x26>
 8006300:	d902      	bls.n	8006308 <_free_r+0x78>
 8006302:	230c      	movs	r3, #12
 8006304:	6003      	str	r3, [r0, #0]
 8006306:	e7d6      	b.n	80062b6 <_free_r+0x26>
 8006308:	6825      	ldr	r5, [r4, #0]
 800630a:	1961      	adds	r1, r4, r5
 800630c:	428b      	cmp	r3, r1
 800630e:	bf04      	itt	eq
 8006310:	6819      	ldreq	r1, [r3, #0]
 8006312:	685b      	ldreq	r3, [r3, #4]
 8006314:	6063      	str	r3, [r4, #4]
 8006316:	bf04      	itt	eq
 8006318:	1949      	addeq	r1, r1, r5
 800631a:	6021      	streq	r1, [r4, #0]
 800631c:	6054      	str	r4, [r2, #4]
 800631e:	e7ca      	b.n	80062b6 <_free_r+0x26>
 8006320:	b003      	add	sp, #12
 8006322:	bd30      	pop	{r4, r5, pc}
 8006324:	20004c34 	.word	0x20004c34

08006328 <sbrk_aligned>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4e0e      	ldr	r6, [pc, #56]	; (8006364 <sbrk_aligned+0x3c>)
 800632c:	460c      	mov	r4, r1
 800632e:	6831      	ldr	r1, [r6, #0]
 8006330:	4605      	mov	r5, r0
 8006332:	b911      	cbnz	r1, 800633a <sbrk_aligned+0x12>
 8006334:	f000 fcaa 	bl	8006c8c <_sbrk_r>
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	4621      	mov	r1, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 fca5 	bl	8006c8c <_sbrk_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d00a      	beq.n	800635c <sbrk_aligned+0x34>
 8006346:	1cc4      	adds	r4, r0, #3
 8006348:	f024 0403 	bic.w	r4, r4, #3
 800634c:	42a0      	cmp	r0, r4
 800634e:	d007      	beq.n	8006360 <sbrk_aligned+0x38>
 8006350:	1a21      	subs	r1, r4, r0
 8006352:	4628      	mov	r0, r5
 8006354:	f000 fc9a 	bl	8006c8c <_sbrk_r>
 8006358:	3001      	adds	r0, #1
 800635a:	d101      	bne.n	8006360 <sbrk_aligned+0x38>
 800635c:	f04f 34ff 	mov.w	r4, #4294967295
 8006360:	4620      	mov	r0, r4
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	20004c38 	.word	0x20004c38

08006368 <_malloc_r>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	1ccd      	adds	r5, r1, #3
 800636e:	f025 0503 	bic.w	r5, r5, #3
 8006372:	3508      	adds	r5, #8
 8006374:	2d0c      	cmp	r5, #12
 8006376:	bf38      	it	cc
 8006378:	250c      	movcc	r5, #12
 800637a:	2d00      	cmp	r5, #0
 800637c:	4607      	mov	r7, r0
 800637e:	db01      	blt.n	8006384 <_malloc_r+0x1c>
 8006380:	42a9      	cmp	r1, r5
 8006382:	d905      	bls.n	8006390 <_malloc_r+0x28>
 8006384:	230c      	movs	r3, #12
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	2600      	movs	r6, #0
 800638a:	4630      	mov	r0, r6
 800638c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006390:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006464 <_malloc_r+0xfc>
 8006394:	f000 f868 	bl	8006468 <__malloc_lock>
 8006398:	f8d8 3000 	ldr.w	r3, [r8]
 800639c:	461c      	mov	r4, r3
 800639e:	bb5c      	cbnz	r4, 80063f8 <_malloc_r+0x90>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4638      	mov	r0, r7
 80063a4:	f7ff ffc0 	bl	8006328 <sbrk_aligned>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	4604      	mov	r4, r0
 80063ac:	d155      	bne.n	800645a <_malloc_r+0xf2>
 80063ae:	f8d8 4000 	ldr.w	r4, [r8]
 80063b2:	4626      	mov	r6, r4
 80063b4:	2e00      	cmp	r6, #0
 80063b6:	d145      	bne.n	8006444 <_malloc_r+0xdc>
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	d048      	beq.n	800644e <_malloc_r+0xe6>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	4631      	mov	r1, r6
 80063c0:	4638      	mov	r0, r7
 80063c2:	eb04 0903 	add.w	r9, r4, r3
 80063c6:	f000 fc61 	bl	8006c8c <_sbrk_r>
 80063ca:	4581      	cmp	r9, r0
 80063cc:	d13f      	bne.n	800644e <_malloc_r+0xe6>
 80063ce:	6821      	ldr	r1, [r4, #0]
 80063d0:	1a6d      	subs	r5, r5, r1
 80063d2:	4629      	mov	r1, r5
 80063d4:	4638      	mov	r0, r7
 80063d6:	f7ff ffa7 	bl	8006328 <sbrk_aligned>
 80063da:	3001      	adds	r0, #1
 80063dc:	d037      	beq.n	800644e <_malloc_r+0xe6>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	442b      	add	r3, r5
 80063e2:	6023      	str	r3, [r4, #0]
 80063e4:	f8d8 3000 	ldr.w	r3, [r8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d038      	beq.n	800645e <_malloc_r+0xf6>
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	42a2      	cmp	r2, r4
 80063f0:	d12b      	bne.n	800644a <_malloc_r+0xe2>
 80063f2:	2200      	movs	r2, #0
 80063f4:	605a      	str	r2, [r3, #4]
 80063f6:	e00f      	b.n	8006418 <_malloc_r+0xb0>
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	1b52      	subs	r2, r2, r5
 80063fc:	d41f      	bmi.n	800643e <_malloc_r+0xd6>
 80063fe:	2a0b      	cmp	r2, #11
 8006400:	d917      	bls.n	8006432 <_malloc_r+0xca>
 8006402:	1961      	adds	r1, r4, r5
 8006404:	42a3      	cmp	r3, r4
 8006406:	6025      	str	r5, [r4, #0]
 8006408:	bf18      	it	ne
 800640a:	6059      	strne	r1, [r3, #4]
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	bf08      	it	eq
 8006410:	f8c8 1000 	streq.w	r1, [r8]
 8006414:	5162      	str	r2, [r4, r5]
 8006416:	604b      	str	r3, [r1, #4]
 8006418:	4638      	mov	r0, r7
 800641a:	f104 060b 	add.w	r6, r4, #11
 800641e:	f000 f829 	bl	8006474 <__malloc_unlock>
 8006422:	f026 0607 	bic.w	r6, r6, #7
 8006426:	1d23      	adds	r3, r4, #4
 8006428:	1af2      	subs	r2, r6, r3
 800642a:	d0ae      	beq.n	800638a <_malloc_r+0x22>
 800642c:	1b9b      	subs	r3, r3, r6
 800642e:	50a3      	str	r3, [r4, r2]
 8006430:	e7ab      	b.n	800638a <_malloc_r+0x22>
 8006432:	42a3      	cmp	r3, r4
 8006434:	6862      	ldr	r2, [r4, #4]
 8006436:	d1dd      	bne.n	80063f4 <_malloc_r+0x8c>
 8006438:	f8c8 2000 	str.w	r2, [r8]
 800643c:	e7ec      	b.n	8006418 <_malloc_r+0xb0>
 800643e:	4623      	mov	r3, r4
 8006440:	6864      	ldr	r4, [r4, #4]
 8006442:	e7ac      	b.n	800639e <_malloc_r+0x36>
 8006444:	4634      	mov	r4, r6
 8006446:	6876      	ldr	r6, [r6, #4]
 8006448:	e7b4      	b.n	80063b4 <_malloc_r+0x4c>
 800644a:	4613      	mov	r3, r2
 800644c:	e7cc      	b.n	80063e8 <_malloc_r+0x80>
 800644e:	230c      	movs	r3, #12
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4638      	mov	r0, r7
 8006454:	f000 f80e 	bl	8006474 <__malloc_unlock>
 8006458:	e797      	b.n	800638a <_malloc_r+0x22>
 800645a:	6025      	str	r5, [r4, #0]
 800645c:	e7dc      	b.n	8006418 <_malloc_r+0xb0>
 800645e:	605b      	str	r3, [r3, #4]
 8006460:	deff      	udf	#255	; 0xff
 8006462:	bf00      	nop
 8006464:	20004c34 	.word	0x20004c34

08006468 <__malloc_lock>:
 8006468:	4801      	ldr	r0, [pc, #4]	; (8006470 <__malloc_lock+0x8>)
 800646a:	f7ff bf00 	b.w	800626e <__retarget_lock_acquire_recursive>
 800646e:	bf00      	nop
 8006470:	20004c30 	.word	0x20004c30

08006474 <__malloc_unlock>:
 8006474:	4801      	ldr	r0, [pc, #4]	; (800647c <__malloc_unlock+0x8>)
 8006476:	f7ff befb 	b.w	8006270 <__retarget_lock_release_recursive>
 800647a:	bf00      	nop
 800647c:	20004c30 	.word	0x20004c30

08006480 <__sfputc_r>:
 8006480:	6893      	ldr	r3, [r2, #8]
 8006482:	3b01      	subs	r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	b410      	push	{r4}
 8006488:	6093      	str	r3, [r2, #8]
 800648a:	da08      	bge.n	800649e <__sfputc_r+0x1e>
 800648c:	6994      	ldr	r4, [r2, #24]
 800648e:	42a3      	cmp	r3, r4
 8006490:	db01      	blt.n	8006496 <__sfputc_r+0x16>
 8006492:	290a      	cmp	r1, #10
 8006494:	d103      	bne.n	800649e <__sfputc_r+0x1e>
 8006496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800649a:	f7ff bdc8 	b.w	800602e <__swbuf_r>
 800649e:	6813      	ldr	r3, [r2, #0]
 80064a0:	1c58      	adds	r0, r3, #1
 80064a2:	6010      	str	r0, [r2, #0]
 80064a4:	7019      	strb	r1, [r3, #0]
 80064a6:	4608      	mov	r0, r1
 80064a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <__sfputs_r>:
 80064ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b0:	4606      	mov	r6, r0
 80064b2:	460f      	mov	r7, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	18d5      	adds	r5, r2, r3
 80064b8:	42ac      	cmp	r4, r5
 80064ba:	d101      	bne.n	80064c0 <__sfputs_r+0x12>
 80064bc:	2000      	movs	r0, #0
 80064be:	e007      	b.n	80064d0 <__sfputs_r+0x22>
 80064c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c4:	463a      	mov	r2, r7
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ffda 	bl	8006480 <__sfputc_r>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d1f3      	bne.n	80064b8 <__sfputs_r+0xa>
 80064d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064d4 <_vfiprintf_r>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	460d      	mov	r5, r1
 80064da:	b09d      	sub	sp, #116	; 0x74
 80064dc:	4614      	mov	r4, r2
 80064de:	4698      	mov	r8, r3
 80064e0:	4606      	mov	r6, r0
 80064e2:	b118      	cbz	r0, 80064ec <_vfiprintf_r+0x18>
 80064e4:	6a03      	ldr	r3, [r0, #32]
 80064e6:	b90b      	cbnz	r3, 80064ec <_vfiprintf_r+0x18>
 80064e8:	f7ff fcba 	bl	8005e60 <__sinit>
 80064ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ee:	07d9      	lsls	r1, r3, #31
 80064f0:	d405      	bmi.n	80064fe <_vfiprintf_r+0x2a>
 80064f2:	89ab      	ldrh	r3, [r5, #12]
 80064f4:	059a      	lsls	r2, r3, #22
 80064f6:	d402      	bmi.n	80064fe <_vfiprintf_r+0x2a>
 80064f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064fa:	f7ff feb8 	bl	800626e <__retarget_lock_acquire_recursive>
 80064fe:	89ab      	ldrh	r3, [r5, #12]
 8006500:	071b      	lsls	r3, r3, #28
 8006502:	d501      	bpl.n	8006508 <_vfiprintf_r+0x34>
 8006504:	692b      	ldr	r3, [r5, #16]
 8006506:	b99b      	cbnz	r3, 8006530 <_vfiprintf_r+0x5c>
 8006508:	4629      	mov	r1, r5
 800650a:	4630      	mov	r0, r6
 800650c:	f7ff fdcc 	bl	80060a8 <__swsetup_r>
 8006510:	b170      	cbz	r0, 8006530 <_vfiprintf_r+0x5c>
 8006512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006514:	07dc      	lsls	r4, r3, #31
 8006516:	d504      	bpl.n	8006522 <_vfiprintf_r+0x4e>
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	b01d      	add	sp, #116	; 0x74
 800651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006522:	89ab      	ldrh	r3, [r5, #12]
 8006524:	0598      	lsls	r0, r3, #22
 8006526:	d4f7      	bmi.n	8006518 <_vfiprintf_r+0x44>
 8006528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800652a:	f7ff fea1 	bl	8006270 <__retarget_lock_release_recursive>
 800652e:	e7f3      	b.n	8006518 <_vfiprintf_r+0x44>
 8006530:	2300      	movs	r3, #0
 8006532:	9309      	str	r3, [sp, #36]	; 0x24
 8006534:	2320      	movs	r3, #32
 8006536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800653a:	f8cd 800c 	str.w	r8, [sp, #12]
 800653e:	2330      	movs	r3, #48	; 0x30
 8006540:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80066f4 <_vfiprintf_r+0x220>
 8006544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006548:	f04f 0901 	mov.w	r9, #1
 800654c:	4623      	mov	r3, r4
 800654e:	469a      	mov	sl, r3
 8006550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006554:	b10a      	cbz	r2, 800655a <_vfiprintf_r+0x86>
 8006556:	2a25      	cmp	r2, #37	; 0x25
 8006558:	d1f9      	bne.n	800654e <_vfiprintf_r+0x7a>
 800655a:	ebba 0b04 	subs.w	fp, sl, r4
 800655e:	d00b      	beq.n	8006578 <_vfiprintf_r+0xa4>
 8006560:	465b      	mov	r3, fp
 8006562:	4622      	mov	r2, r4
 8006564:	4629      	mov	r1, r5
 8006566:	4630      	mov	r0, r6
 8006568:	f7ff ffa1 	bl	80064ae <__sfputs_r>
 800656c:	3001      	adds	r0, #1
 800656e:	f000 80a9 	beq.w	80066c4 <_vfiprintf_r+0x1f0>
 8006572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006574:	445a      	add	r2, fp
 8006576:	9209      	str	r2, [sp, #36]	; 0x24
 8006578:	f89a 3000 	ldrb.w	r3, [sl]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 80a1 	beq.w	80066c4 <_vfiprintf_r+0x1f0>
 8006582:	2300      	movs	r3, #0
 8006584:	f04f 32ff 	mov.w	r2, #4294967295
 8006588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800658c:	f10a 0a01 	add.w	sl, sl, #1
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	9307      	str	r3, [sp, #28]
 8006594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006598:	931a      	str	r3, [sp, #104]	; 0x68
 800659a:	4654      	mov	r4, sl
 800659c:	2205      	movs	r2, #5
 800659e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a2:	4854      	ldr	r0, [pc, #336]	; (80066f4 <_vfiprintf_r+0x220>)
 80065a4:	f7f9 fe24 	bl	80001f0 <memchr>
 80065a8:	9a04      	ldr	r2, [sp, #16]
 80065aa:	b9d8      	cbnz	r0, 80065e4 <_vfiprintf_r+0x110>
 80065ac:	06d1      	lsls	r1, r2, #27
 80065ae:	bf44      	itt	mi
 80065b0:	2320      	movmi	r3, #32
 80065b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065b6:	0713      	lsls	r3, r2, #28
 80065b8:	bf44      	itt	mi
 80065ba:	232b      	movmi	r3, #43	; 0x2b
 80065bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065c0:	f89a 3000 	ldrb.w	r3, [sl]
 80065c4:	2b2a      	cmp	r3, #42	; 0x2a
 80065c6:	d015      	beq.n	80065f4 <_vfiprintf_r+0x120>
 80065c8:	9a07      	ldr	r2, [sp, #28]
 80065ca:	4654      	mov	r4, sl
 80065cc:	2000      	movs	r0, #0
 80065ce:	f04f 0c0a 	mov.w	ip, #10
 80065d2:	4621      	mov	r1, r4
 80065d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065d8:	3b30      	subs	r3, #48	; 0x30
 80065da:	2b09      	cmp	r3, #9
 80065dc:	d94d      	bls.n	800667a <_vfiprintf_r+0x1a6>
 80065de:	b1b0      	cbz	r0, 800660e <_vfiprintf_r+0x13a>
 80065e0:	9207      	str	r2, [sp, #28]
 80065e2:	e014      	b.n	800660e <_vfiprintf_r+0x13a>
 80065e4:	eba0 0308 	sub.w	r3, r0, r8
 80065e8:	fa09 f303 	lsl.w	r3, r9, r3
 80065ec:	4313      	orrs	r3, r2
 80065ee:	9304      	str	r3, [sp, #16]
 80065f0:	46a2      	mov	sl, r4
 80065f2:	e7d2      	b.n	800659a <_vfiprintf_r+0xc6>
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	1d19      	adds	r1, r3, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	9103      	str	r1, [sp, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bfbb      	ittet	lt
 8006600:	425b      	neglt	r3, r3
 8006602:	f042 0202 	orrlt.w	r2, r2, #2
 8006606:	9307      	strge	r3, [sp, #28]
 8006608:	9307      	strlt	r3, [sp, #28]
 800660a:	bfb8      	it	lt
 800660c:	9204      	strlt	r2, [sp, #16]
 800660e:	7823      	ldrb	r3, [r4, #0]
 8006610:	2b2e      	cmp	r3, #46	; 0x2e
 8006612:	d10c      	bne.n	800662e <_vfiprintf_r+0x15a>
 8006614:	7863      	ldrb	r3, [r4, #1]
 8006616:	2b2a      	cmp	r3, #42	; 0x2a
 8006618:	d134      	bne.n	8006684 <_vfiprintf_r+0x1b0>
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	1d1a      	adds	r2, r3, #4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	9203      	str	r2, [sp, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	bfb8      	it	lt
 8006626:	f04f 33ff 	movlt.w	r3, #4294967295
 800662a:	3402      	adds	r4, #2
 800662c:	9305      	str	r3, [sp, #20]
 800662e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006704 <_vfiprintf_r+0x230>
 8006632:	7821      	ldrb	r1, [r4, #0]
 8006634:	2203      	movs	r2, #3
 8006636:	4650      	mov	r0, sl
 8006638:	f7f9 fdda 	bl	80001f0 <memchr>
 800663c:	b138      	cbz	r0, 800664e <_vfiprintf_r+0x17a>
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	eba0 000a 	sub.w	r0, r0, sl
 8006644:	2240      	movs	r2, #64	; 0x40
 8006646:	4082      	lsls	r2, r0
 8006648:	4313      	orrs	r3, r2
 800664a:	3401      	adds	r4, #1
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006652:	4829      	ldr	r0, [pc, #164]	; (80066f8 <_vfiprintf_r+0x224>)
 8006654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006658:	2206      	movs	r2, #6
 800665a:	f7f9 fdc9 	bl	80001f0 <memchr>
 800665e:	2800      	cmp	r0, #0
 8006660:	d03f      	beq.n	80066e2 <_vfiprintf_r+0x20e>
 8006662:	4b26      	ldr	r3, [pc, #152]	; (80066fc <_vfiprintf_r+0x228>)
 8006664:	bb1b      	cbnz	r3, 80066ae <_vfiprintf_r+0x1da>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	3307      	adds	r3, #7
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	3308      	adds	r3, #8
 8006670:	9303      	str	r3, [sp, #12]
 8006672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006674:	443b      	add	r3, r7
 8006676:	9309      	str	r3, [sp, #36]	; 0x24
 8006678:	e768      	b.n	800654c <_vfiprintf_r+0x78>
 800667a:	fb0c 3202 	mla	r2, ip, r2, r3
 800667e:	460c      	mov	r4, r1
 8006680:	2001      	movs	r0, #1
 8006682:	e7a6      	b.n	80065d2 <_vfiprintf_r+0xfe>
 8006684:	2300      	movs	r3, #0
 8006686:	3401      	adds	r4, #1
 8006688:	9305      	str	r3, [sp, #20]
 800668a:	4619      	mov	r1, r3
 800668c:	f04f 0c0a 	mov.w	ip, #10
 8006690:	4620      	mov	r0, r4
 8006692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006696:	3a30      	subs	r2, #48	; 0x30
 8006698:	2a09      	cmp	r2, #9
 800669a:	d903      	bls.n	80066a4 <_vfiprintf_r+0x1d0>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0c6      	beq.n	800662e <_vfiprintf_r+0x15a>
 80066a0:	9105      	str	r1, [sp, #20]
 80066a2:	e7c4      	b.n	800662e <_vfiprintf_r+0x15a>
 80066a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80066a8:	4604      	mov	r4, r0
 80066aa:	2301      	movs	r3, #1
 80066ac:	e7f0      	b.n	8006690 <_vfiprintf_r+0x1bc>
 80066ae:	ab03      	add	r3, sp, #12
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	462a      	mov	r2, r5
 80066b4:	4b12      	ldr	r3, [pc, #72]	; (8006700 <_vfiprintf_r+0x22c>)
 80066b6:	a904      	add	r1, sp, #16
 80066b8:	4630      	mov	r0, r6
 80066ba:	f3af 8000 	nop.w
 80066be:	4607      	mov	r7, r0
 80066c0:	1c78      	adds	r0, r7, #1
 80066c2:	d1d6      	bne.n	8006672 <_vfiprintf_r+0x19e>
 80066c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066c6:	07d9      	lsls	r1, r3, #31
 80066c8:	d405      	bmi.n	80066d6 <_vfiprintf_r+0x202>
 80066ca:	89ab      	ldrh	r3, [r5, #12]
 80066cc:	059a      	lsls	r2, r3, #22
 80066ce:	d402      	bmi.n	80066d6 <_vfiprintf_r+0x202>
 80066d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066d2:	f7ff fdcd 	bl	8006270 <__retarget_lock_release_recursive>
 80066d6:	89ab      	ldrh	r3, [r5, #12]
 80066d8:	065b      	lsls	r3, r3, #25
 80066da:	f53f af1d 	bmi.w	8006518 <_vfiprintf_r+0x44>
 80066de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e0:	e71c      	b.n	800651c <_vfiprintf_r+0x48>
 80066e2:	ab03      	add	r3, sp, #12
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	462a      	mov	r2, r5
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <_vfiprintf_r+0x22c>)
 80066ea:	a904      	add	r1, sp, #16
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 f879 	bl	80067e4 <_printf_i>
 80066f2:	e7e4      	b.n	80066be <_vfiprintf_r+0x1ea>
 80066f4:	08006f8d 	.word	0x08006f8d
 80066f8:	08006f97 	.word	0x08006f97
 80066fc:	00000000 	.word	0x00000000
 8006700:	080064af 	.word	0x080064af
 8006704:	08006f93 	.word	0x08006f93

08006708 <_printf_common>:
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	4616      	mov	r6, r2
 800670e:	4699      	mov	r9, r3
 8006710:	688a      	ldr	r2, [r1, #8]
 8006712:	690b      	ldr	r3, [r1, #16]
 8006714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006718:	4293      	cmp	r3, r2
 800671a:	bfb8      	it	lt
 800671c:	4613      	movlt	r3, r2
 800671e:	6033      	str	r3, [r6, #0]
 8006720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006724:	4607      	mov	r7, r0
 8006726:	460c      	mov	r4, r1
 8006728:	b10a      	cbz	r2, 800672e <_printf_common+0x26>
 800672a:	3301      	adds	r3, #1
 800672c:	6033      	str	r3, [r6, #0]
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	0699      	lsls	r1, r3, #26
 8006732:	bf42      	ittt	mi
 8006734:	6833      	ldrmi	r3, [r6, #0]
 8006736:	3302      	addmi	r3, #2
 8006738:	6033      	strmi	r3, [r6, #0]
 800673a:	6825      	ldr	r5, [r4, #0]
 800673c:	f015 0506 	ands.w	r5, r5, #6
 8006740:	d106      	bne.n	8006750 <_printf_common+0x48>
 8006742:	f104 0a19 	add.w	sl, r4, #25
 8006746:	68e3      	ldr	r3, [r4, #12]
 8006748:	6832      	ldr	r2, [r6, #0]
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	42ab      	cmp	r3, r5
 800674e:	dc26      	bgt.n	800679e <_printf_common+0x96>
 8006750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006754:	1e13      	subs	r3, r2, #0
 8006756:	6822      	ldr	r2, [r4, #0]
 8006758:	bf18      	it	ne
 800675a:	2301      	movne	r3, #1
 800675c:	0692      	lsls	r2, r2, #26
 800675e:	d42b      	bmi.n	80067b8 <_printf_common+0xb0>
 8006760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006764:	4649      	mov	r1, r9
 8006766:	4638      	mov	r0, r7
 8006768:	47c0      	blx	r8
 800676a:	3001      	adds	r0, #1
 800676c:	d01e      	beq.n	80067ac <_printf_common+0xa4>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	6922      	ldr	r2, [r4, #16]
 8006772:	f003 0306 	and.w	r3, r3, #6
 8006776:	2b04      	cmp	r3, #4
 8006778:	bf02      	ittt	eq
 800677a:	68e5      	ldreq	r5, [r4, #12]
 800677c:	6833      	ldreq	r3, [r6, #0]
 800677e:	1aed      	subeq	r5, r5, r3
 8006780:	68a3      	ldr	r3, [r4, #8]
 8006782:	bf0c      	ite	eq
 8006784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006788:	2500      	movne	r5, #0
 800678a:	4293      	cmp	r3, r2
 800678c:	bfc4      	itt	gt
 800678e:	1a9b      	subgt	r3, r3, r2
 8006790:	18ed      	addgt	r5, r5, r3
 8006792:	2600      	movs	r6, #0
 8006794:	341a      	adds	r4, #26
 8006796:	42b5      	cmp	r5, r6
 8006798:	d11a      	bne.n	80067d0 <_printf_common+0xc8>
 800679a:	2000      	movs	r0, #0
 800679c:	e008      	b.n	80067b0 <_printf_common+0xa8>
 800679e:	2301      	movs	r3, #1
 80067a0:	4652      	mov	r2, sl
 80067a2:	4649      	mov	r1, r9
 80067a4:	4638      	mov	r0, r7
 80067a6:	47c0      	blx	r8
 80067a8:	3001      	adds	r0, #1
 80067aa:	d103      	bne.n	80067b4 <_printf_common+0xac>
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b4:	3501      	adds	r5, #1
 80067b6:	e7c6      	b.n	8006746 <_printf_common+0x3e>
 80067b8:	18e1      	adds	r1, r4, r3
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	2030      	movs	r0, #48	; 0x30
 80067be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067c2:	4422      	add	r2, r4
 80067c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067cc:	3302      	adds	r3, #2
 80067ce:	e7c7      	b.n	8006760 <_printf_common+0x58>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4622      	mov	r2, r4
 80067d4:	4649      	mov	r1, r9
 80067d6:	4638      	mov	r0, r7
 80067d8:	47c0      	blx	r8
 80067da:	3001      	adds	r0, #1
 80067dc:	d0e6      	beq.n	80067ac <_printf_common+0xa4>
 80067de:	3601      	adds	r6, #1
 80067e0:	e7d9      	b.n	8006796 <_printf_common+0x8e>
	...

080067e4 <_printf_i>:
 80067e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e8:	7e0f      	ldrb	r7, [r1, #24]
 80067ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067ec:	2f78      	cmp	r7, #120	; 0x78
 80067ee:	4691      	mov	r9, r2
 80067f0:	4680      	mov	r8, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	469a      	mov	sl, r3
 80067f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067fa:	d807      	bhi.n	800680c <_printf_i+0x28>
 80067fc:	2f62      	cmp	r7, #98	; 0x62
 80067fe:	d80a      	bhi.n	8006816 <_printf_i+0x32>
 8006800:	2f00      	cmp	r7, #0
 8006802:	f000 80d4 	beq.w	80069ae <_printf_i+0x1ca>
 8006806:	2f58      	cmp	r7, #88	; 0x58
 8006808:	f000 80c0 	beq.w	800698c <_printf_i+0x1a8>
 800680c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006814:	e03a      	b.n	800688c <_printf_i+0xa8>
 8006816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800681a:	2b15      	cmp	r3, #21
 800681c:	d8f6      	bhi.n	800680c <_printf_i+0x28>
 800681e:	a101      	add	r1, pc, #4	; (adr r1, 8006824 <_printf_i+0x40>)
 8006820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006824:	0800687d 	.word	0x0800687d
 8006828:	08006891 	.word	0x08006891
 800682c:	0800680d 	.word	0x0800680d
 8006830:	0800680d 	.word	0x0800680d
 8006834:	0800680d 	.word	0x0800680d
 8006838:	0800680d 	.word	0x0800680d
 800683c:	08006891 	.word	0x08006891
 8006840:	0800680d 	.word	0x0800680d
 8006844:	0800680d 	.word	0x0800680d
 8006848:	0800680d 	.word	0x0800680d
 800684c:	0800680d 	.word	0x0800680d
 8006850:	08006995 	.word	0x08006995
 8006854:	080068bd 	.word	0x080068bd
 8006858:	0800694f 	.word	0x0800694f
 800685c:	0800680d 	.word	0x0800680d
 8006860:	0800680d 	.word	0x0800680d
 8006864:	080069b7 	.word	0x080069b7
 8006868:	0800680d 	.word	0x0800680d
 800686c:	080068bd 	.word	0x080068bd
 8006870:	0800680d 	.word	0x0800680d
 8006874:	0800680d 	.word	0x0800680d
 8006878:	08006957 	.word	0x08006957
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	1d1a      	adds	r2, r3, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	602a      	str	r2, [r5, #0]
 8006884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800688c:	2301      	movs	r3, #1
 800688e:	e09f      	b.n	80069d0 <_printf_i+0x1ec>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	682b      	ldr	r3, [r5, #0]
 8006894:	0607      	lsls	r7, r0, #24
 8006896:	f103 0104 	add.w	r1, r3, #4
 800689a:	6029      	str	r1, [r5, #0]
 800689c:	d501      	bpl.n	80068a2 <_printf_i+0xbe>
 800689e:	681e      	ldr	r6, [r3, #0]
 80068a0:	e003      	b.n	80068aa <_printf_i+0xc6>
 80068a2:	0646      	lsls	r6, r0, #25
 80068a4:	d5fb      	bpl.n	800689e <_printf_i+0xba>
 80068a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80068aa:	2e00      	cmp	r6, #0
 80068ac:	da03      	bge.n	80068b6 <_printf_i+0xd2>
 80068ae:	232d      	movs	r3, #45	; 0x2d
 80068b0:	4276      	negs	r6, r6
 80068b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b6:	485a      	ldr	r0, [pc, #360]	; (8006a20 <_printf_i+0x23c>)
 80068b8:	230a      	movs	r3, #10
 80068ba:	e012      	b.n	80068e2 <_printf_i+0xfe>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	6820      	ldr	r0, [r4, #0]
 80068c0:	1d19      	adds	r1, r3, #4
 80068c2:	6029      	str	r1, [r5, #0]
 80068c4:	0605      	lsls	r5, r0, #24
 80068c6:	d501      	bpl.n	80068cc <_printf_i+0xe8>
 80068c8:	681e      	ldr	r6, [r3, #0]
 80068ca:	e002      	b.n	80068d2 <_printf_i+0xee>
 80068cc:	0641      	lsls	r1, r0, #25
 80068ce:	d5fb      	bpl.n	80068c8 <_printf_i+0xe4>
 80068d0:	881e      	ldrh	r6, [r3, #0]
 80068d2:	4853      	ldr	r0, [pc, #332]	; (8006a20 <_printf_i+0x23c>)
 80068d4:	2f6f      	cmp	r7, #111	; 0x6f
 80068d6:	bf0c      	ite	eq
 80068d8:	2308      	moveq	r3, #8
 80068da:	230a      	movne	r3, #10
 80068dc:	2100      	movs	r1, #0
 80068de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068e2:	6865      	ldr	r5, [r4, #4]
 80068e4:	60a5      	str	r5, [r4, #8]
 80068e6:	2d00      	cmp	r5, #0
 80068e8:	bfa2      	ittt	ge
 80068ea:	6821      	ldrge	r1, [r4, #0]
 80068ec:	f021 0104 	bicge.w	r1, r1, #4
 80068f0:	6021      	strge	r1, [r4, #0]
 80068f2:	b90e      	cbnz	r6, 80068f8 <_printf_i+0x114>
 80068f4:	2d00      	cmp	r5, #0
 80068f6:	d04b      	beq.n	8006990 <_printf_i+0x1ac>
 80068f8:	4615      	mov	r5, r2
 80068fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80068fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006902:	5dc7      	ldrb	r7, [r0, r7]
 8006904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006908:	4637      	mov	r7, r6
 800690a:	42bb      	cmp	r3, r7
 800690c:	460e      	mov	r6, r1
 800690e:	d9f4      	bls.n	80068fa <_printf_i+0x116>
 8006910:	2b08      	cmp	r3, #8
 8006912:	d10b      	bne.n	800692c <_printf_i+0x148>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	07de      	lsls	r6, r3, #31
 8006918:	d508      	bpl.n	800692c <_printf_i+0x148>
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	6861      	ldr	r1, [r4, #4]
 800691e:	4299      	cmp	r1, r3
 8006920:	bfde      	ittt	le
 8006922:	2330      	movle	r3, #48	; 0x30
 8006924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006928:	f105 35ff 	addle.w	r5, r5, #4294967295
 800692c:	1b52      	subs	r2, r2, r5
 800692e:	6122      	str	r2, [r4, #16]
 8006930:	f8cd a000 	str.w	sl, [sp]
 8006934:	464b      	mov	r3, r9
 8006936:	aa03      	add	r2, sp, #12
 8006938:	4621      	mov	r1, r4
 800693a:	4640      	mov	r0, r8
 800693c:	f7ff fee4 	bl	8006708 <_printf_common>
 8006940:	3001      	adds	r0, #1
 8006942:	d14a      	bne.n	80069da <_printf_i+0x1f6>
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	b004      	add	sp, #16
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	f043 0320 	orr.w	r3, r3, #32
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	4833      	ldr	r0, [pc, #204]	; (8006a24 <_printf_i+0x240>)
 8006958:	2778      	movs	r7, #120	; 0x78
 800695a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	6829      	ldr	r1, [r5, #0]
 8006962:	061f      	lsls	r7, r3, #24
 8006964:	f851 6b04 	ldr.w	r6, [r1], #4
 8006968:	d402      	bmi.n	8006970 <_printf_i+0x18c>
 800696a:	065f      	lsls	r7, r3, #25
 800696c:	bf48      	it	mi
 800696e:	b2b6      	uxthmi	r6, r6
 8006970:	07df      	lsls	r7, r3, #31
 8006972:	bf48      	it	mi
 8006974:	f043 0320 	orrmi.w	r3, r3, #32
 8006978:	6029      	str	r1, [r5, #0]
 800697a:	bf48      	it	mi
 800697c:	6023      	strmi	r3, [r4, #0]
 800697e:	b91e      	cbnz	r6, 8006988 <_printf_i+0x1a4>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	f023 0320 	bic.w	r3, r3, #32
 8006986:	6023      	str	r3, [r4, #0]
 8006988:	2310      	movs	r3, #16
 800698a:	e7a7      	b.n	80068dc <_printf_i+0xf8>
 800698c:	4824      	ldr	r0, [pc, #144]	; (8006a20 <_printf_i+0x23c>)
 800698e:	e7e4      	b.n	800695a <_printf_i+0x176>
 8006990:	4615      	mov	r5, r2
 8006992:	e7bd      	b.n	8006910 <_printf_i+0x12c>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	6826      	ldr	r6, [r4, #0]
 8006998:	6961      	ldr	r1, [r4, #20]
 800699a:	1d18      	adds	r0, r3, #4
 800699c:	6028      	str	r0, [r5, #0]
 800699e:	0635      	lsls	r5, r6, #24
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	d501      	bpl.n	80069a8 <_printf_i+0x1c4>
 80069a4:	6019      	str	r1, [r3, #0]
 80069a6:	e002      	b.n	80069ae <_printf_i+0x1ca>
 80069a8:	0670      	lsls	r0, r6, #25
 80069aa:	d5fb      	bpl.n	80069a4 <_printf_i+0x1c0>
 80069ac:	8019      	strh	r1, [r3, #0]
 80069ae:	2300      	movs	r3, #0
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	4615      	mov	r5, r2
 80069b4:	e7bc      	b.n	8006930 <_printf_i+0x14c>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	602a      	str	r2, [r5, #0]
 80069bc:	681d      	ldr	r5, [r3, #0]
 80069be:	6862      	ldr	r2, [r4, #4]
 80069c0:	2100      	movs	r1, #0
 80069c2:	4628      	mov	r0, r5
 80069c4:	f7f9 fc14 	bl	80001f0 <memchr>
 80069c8:	b108      	cbz	r0, 80069ce <_printf_i+0x1ea>
 80069ca:	1b40      	subs	r0, r0, r5
 80069cc:	6060      	str	r0, [r4, #4]
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	2300      	movs	r3, #0
 80069d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d8:	e7aa      	b.n	8006930 <_printf_i+0x14c>
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	462a      	mov	r2, r5
 80069de:	4649      	mov	r1, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	47d0      	blx	sl
 80069e4:	3001      	adds	r0, #1
 80069e6:	d0ad      	beq.n	8006944 <_printf_i+0x160>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	079b      	lsls	r3, r3, #30
 80069ec:	d413      	bmi.n	8006a16 <_printf_i+0x232>
 80069ee:	68e0      	ldr	r0, [r4, #12]
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	4298      	cmp	r0, r3
 80069f4:	bfb8      	it	lt
 80069f6:	4618      	movlt	r0, r3
 80069f8:	e7a6      	b.n	8006948 <_printf_i+0x164>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4632      	mov	r2, r6
 80069fe:	4649      	mov	r1, r9
 8006a00:	4640      	mov	r0, r8
 8006a02:	47d0      	blx	sl
 8006a04:	3001      	adds	r0, #1
 8006a06:	d09d      	beq.n	8006944 <_printf_i+0x160>
 8006a08:	3501      	adds	r5, #1
 8006a0a:	68e3      	ldr	r3, [r4, #12]
 8006a0c:	9903      	ldr	r1, [sp, #12]
 8006a0e:	1a5b      	subs	r3, r3, r1
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	dcf2      	bgt.n	80069fa <_printf_i+0x216>
 8006a14:	e7eb      	b.n	80069ee <_printf_i+0x20a>
 8006a16:	2500      	movs	r5, #0
 8006a18:	f104 0619 	add.w	r6, r4, #25
 8006a1c:	e7f5      	b.n	8006a0a <_printf_i+0x226>
 8006a1e:	bf00      	nop
 8006a20:	08006f9e 	.word	0x08006f9e
 8006a24:	08006faf 	.word	0x08006faf

08006a28 <__sflush_r>:
 8006a28:	898a      	ldrh	r2, [r1, #12]
 8006a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2e:	4605      	mov	r5, r0
 8006a30:	0710      	lsls	r0, r2, #28
 8006a32:	460c      	mov	r4, r1
 8006a34:	d458      	bmi.n	8006ae8 <__sflush_r+0xc0>
 8006a36:	684b      	ldr	r3, [r1, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	dc05      	bgt.n	8006a48 <__sflush_r+0x20>
 8006a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dc02      	bgt.n	8006a48 <__sflush_r+0x20>
 8006a42:	2000      	movs	r0, #0
 8006a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a4a:	2e00      	cmp	r6, #0
 8006a4c:	d0f9      	beq.n	8006a42 <__sflush_r+0x1a>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a54:	682f      	ldr	r7, [r5, #0]
 8006a56:	6a21      	ldr	r1, [r4, #32]
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	d032      	beq.n	8006ac2 <__sflush_r+0x9a>
 8006a5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	075a      	lsls	r2, r3, #29
 8006a62:	d505      	bpl.n	8006a70 <__sflush_r+0x48>
 8006a64:	6863      	ldr	r3, [r4, #4]
 8006a66:	1ac0      	subs	r0, r0, r3
 8006a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a6a:	b10b      	cbz	r3, 8006a70 <__sflush_r+0x48>
 8006a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a6e:	1ac0      	subs	r0, r0, r3
 8006a70:	2300      	movs	r3, #0
 8006a72:	4602      	mov	r2, r0
 8006a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a76:	6a21      	ldr	r1, [r4, #32]
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b0      	blx	r6
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	d106      	bne.n	8006a90 <__sflush_r+0x68>
 8006a82:	6829      	ldr	r1, [r5, #0]
 8006a84:	291d      	cmp	r1, #29
 8006a86:	d82b      	bhi.n	8006ae0 <__sflush_r+0xb8>
 8006a88:	4a29      	ldr	r2, [pc, #164]	; (8006b30 <__sflush_r+0x108>)
 8006a8a:	410a      	asrs	r2, r1
 8006a8c:	07d6      	lsls	r6, r2, #31
 8006a8e:	d427      	bmi.n	8006ae0 <__sflush_r+0xb8>
 8006a90:	2200      	movs	r2, #0
 8006a92:	6062      	str	r2, [r4, #4]
 8006a94:	04d9      	lsls	r1, r3, #19
 8006a96:	6922      	ldr	r2, [r4, #16]
 8006a98:	6022      	str	r2, [r4, #0]
 8006a9a:	d504      	bpl.n	8006aa6 <__sflush_r+0x7e>
 8006a9c:	1c42      	adds	r2, r0, #1
 8006a9e:	d101      	bne.n	8006aa4 <__sflush_r+0x7c>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b903      	cbnz	r3, 8006aa6 <__sflush_r+0x7e>
 8006aa4:	6560      	str	r0, [r4, #84]	; 0x54
 8006aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aa8:	602f      	str	r7, [r5, #0]
 8006aaa:	2900      	cmp	r1, #0
 8006aac:	d0c9      	beq.n	8006a42 <__sflush_r+0x1a>
 8006aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	d002      	beq.n	8006abc <__sflush_r+0x94>
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f7ff fbea 	bl	8006290 <_free_r>
 8006abc:	2000      	movs	r0, #0
 8006abe:	6360      	str	r0, [r4, #52]	; 0x34
 8006ac0:	e7c0      	b.n	8006a44 <__sflush_r+0x1c>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b0      	blx	r6
 8006ac8:	1c41      	adds	r1, r0, #1
 8006aca:	d1c8      	bne.n	8006a5e <__sflush_r+0x36>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0c5      	beq.n	8006a5e <__sflush_r+0x36>
 8006ad2:	2b1d      	cmp	r3, #29
 8006ad4:	d001      	beq.n	8006ada <__sflush_r+0xb2>
 8006ad6:	2b16      	cmp	r3, #22
 8006ad8:	d101      	bne.n	8006ade <__sflush_r+0xb6>
 8006ada:	602f      	str	r7, [r5, #0]
 8006adc:	e7b1      	b.n	8006a42 <__sflush_r+0x1a>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	e7ad      	b.n	8006a44 <__sflush_r+0x1c>
 8006ae8:	690f      	ldr	r7, [r1, #16]
 8006aea:	2f00      	cmp	r7, #0
 8006aec:	d0a9      	beq.n	8006a42 <__sflush_r+0x1a>
 8006aee:	0793      	lsls	r3, r2, #30
 8006af0:	680e      	ldr	r6, [r1, #0]
 8006af2:	bf08      	it	eq
 8006af4:	694b      	ldreq	r3, [r1, #20]
 8006af6:	600f      	str	r7, [r1, #0]
 8006af8:	bf18      	it	ne
 8006afa:	2300      	movne	r3, #0
 8006afc:	eba6 0807 	sub.w	r8, r6, r7
 8006b00:	608b      	str	r3, [r1, #8]
 8006b02:	f1b8 0f00 	cmp.w	r8, #0
 8006b06:	dd9c      	ble.n	8006a42 <__sflush_r+0x1a>
 8006b08:	6a21      	ldr	r1, [r4, #32]
 8006b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b0c:	4643      	mov	r3, r8
 8006b0e:	463a      	mov	r2, r7
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b0      	blx	r6
 8006b14:	2800      	cmp	r0, #0
 8006b16:	dc06      	bgt.n	8006b26 <__sflush_r+0xfe>
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295
 8006b24:	e78e      	b.n	8006a44 <__sflush_r+0x1c>
 8006b26:	4407      	add	r7, r0
 8006b28:	eba8 0800 	sub.w	r8, r8, r0
 8006b2c:	e7e9      	b.n	8006b02 <__sflush_r+0xda>
 8006b2e:	bf00      	nop
 8006b30:	dfbffffe 	.word	0xdfbffffe

08006b34 <_fflush_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	690b      	ldr	r3, [r1, #16]
 8006b38:	4605      	mov	r5, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	b913      	cbnz	r3, 8006b44 <_fflush_r+0x10>
 8006b3e:	2500      	movs	r5, #0
 8006b40:	4628      	mov	r0, r5
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	b118      	cbz	r0, 8006b4e <_fflush_r+0x1a>
 8006b46:	6a03      	ldr	r3, [r0, #32]
 8006b48:	b90b      	cbnz	r3, 8006b4e <_fflush_r+0x1a>
 8006b4a:	f7ff f989 	bl	8005e60 <__sinit>
 8006b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f3      	beq.n	8006b3e <_fflush_r+0xa>
 8006b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b58:	07d0      	lsls	r0, r2, #31
 8006b5a:	d404      	bmi.n	8006b66 <_fflush_r+0x32>
 8006b5c:	0599      	lsls	r1, r3, #22
 8006b5e:	d402      	bmi.n	8006b66 <_fflush_r+0x32>
 8006b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b62:	f7ff fb84 	bl	800626e <__retarget_lock_acquire_recursive>
 8006b66:	4628      	mov	r0, r5
 8006b68:	4621      	mov	r1, r4
 8006b6a:	f7ff ff5d 	bl	8006a28 <__sflush_r>
 8006b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b70:	07da      	lsls	r2, r3, #31
 8006b72:	4605      	mov	r5, r0
 8006b74:	d4e4      	bmi.n	8006b40 <_fflush_r+0xc>
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	059b      	lsls	r3, r3, #22
 8006b7a:	d4e1      	bmi.n	8006b40 <_fflush_r+0xc>
 8006b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b7e:	f7ff fb77 	bl	8006270 <__retarget_lock_release_recursive>
 8006b82:	e7dd      	b.n	8006b40 <_fflush_r+0xc>

08006b84 <__swhatbuf_r>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	460c      	mov	r4, r1
 8006b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	b096      	sub	sp, #88	; 0x58
 8006b90:	4615      	mov	r5, r2
 8006b92:	461e      	mov	r6, r3
 8006b94:	da0d      	bge.n	8006bb2 <__swhatbuf_r+0x2e>
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b9c:	f04f 0100 	mov.w	r1, #0
 8006ba0:	bf0c      	ite	eq
 8006ba2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ba6:	2340      	movne	r3, #64	; 0x40
 8006ba8:	2000      	movs	r0, #0
 8006baa:	6031      	str	r1, [r6, #0]
 8006bac:	602b      	str	r3, [r5, #0]
 8006bae:	b016      	add	sp, #88	; 0x58
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}
 8006bb2:	466a      	mov	r2, sp
 8006bb4:	f000 f848 	bl	8006c48 <_fstat_r>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	dbec      	blt.n	8006b96 <__swhatbuf_r+0x12>
 8006bbc:	9901      	ldr	r1, [sp, #4]
 8006bbe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006bc2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006bc6:	4259      	negs	r1, r3
 8006bc8:	4159      	adcs	r1, r3
 8006bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bce:	e7eb      	b.n	8006ba8 <__swhatbuf_r+0x24>

08006bd0 <__smakebuf_r>:
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bd4:	079d      	lsls	r5, r3, #30
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	d507      	bpl.n	8006bec <__smakebuf_r+0x1c>
 8006bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	6123      	str	r3, [r4, #16]
 8006be4:	2301      	movs	r3, #1
 8006be6:	6163      	str	r3, [r4, #20]
 8006be8:	b002      	add	sp, #8
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	ab01      	add	r3, sp, #4
 8006bee:	466a      	mov	r2, sp
 8006bf0:	f7ff ffc8 	bl	8006b84 <__swhatbuf_r>
 8006bf4:	9900      	ldr	r1, [sp, #0]
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f7ff fbb5 	bl	8006368 <_malloc_r>
 8006bfe:	b948      	cbnz	r0, 8006c14 <__smakebuf_r+0x44>
 8006c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c04:	059a      	lsls	r2, r3, #22
 8006c06:	d4ef      	bmi.n	8006be8 <__smakebuf_r+0x18>
 8006c08:	f023 0303 	bic.w	r3, r3, #3
 8006c0c:	f043 0302 	orr.w	r3, r3, #2
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	e7e3      	b.n	8006bdc <__smakebuf_r+0xc>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	6020      	str	r0, [r4, #0]
 8006c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1c:	81a3      	strh	r3, [r4, #12]
 8006c1e:	9b00      	ldr	r3, [sp, #0]
 8006c20:	6163      	str	r3, [r4, #20]
 8006c22:	9b01      	ldr	r3, [sp, #4]
 8006c24:	6120      	str	r0, [r4, #16]
 8006c26:	b15b      	cbz	r3, 8006c40 <__smakebuf_r+0x70>
 8006c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f000 f81d 	bl	8006c6c <_isatty_r>
 8006c32:	b128      	cbz	r0, 8006c40 <__smakebuf_r+0x70>
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	f043 0301 	orr.w	r3, r3, #1
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	431d      	orrs	r5, r3
 8006c44:	81a5      	strh	r5, [r4, #12]
 8006c46:	e7cf      	b.n	8006be8 <__smakebuf_r+0x18>

08006c48 <_fstat_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d07      	ldr	r5, [pc, #28]	; (8006c68 <_fstat_r+0x20>)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	f7f9 fe86 	bl	8000966 <_fstat>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	d102      	bne.n	8006c64 <_fstat_r+0x1c>
 8006c5e:	682b      	ldr	r3, [r5, #0]
 8006c60:	b103      	cbz	r3, 8006c64 <_fstat_r+0x1c>
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	bd38      	pop	{r3, r4, r5, pc}
 8006c66:	bf00      	nop
 8006c68:	20004c2c 	.word	0x20004c2c

08006c6c <_isatty_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d06      	ldr	r5, [pc, #24]	; (8006c88 <_isatty_r+0x1c>)
 8006c70:	2300      	movs	r3, #0
 8006c72:	4604      	mov	r4, r0
 8006c74:	4608      	mov	r0, r1
 8006c76:	602b      	str	r3, [r5, #0]
 8006c78:	f7f9 fe85 	bl	8000986 <_isatty>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_isatty_r+0x1a>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_isatty_r+0x1a>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	20004c2c 	.word	0x20004c2c

08006c8c <_sbrk_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d06      	ldr	r5, [pc, #24]	; (8006ca8 <_sbrk_r+0x1c>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	f7f9 fe8e 	bl	80009b8 <_sbrk>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_sbrk_r+0x1a>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_sbrk_r+0x1a>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20004c2c 	.word	0x20004c2c

08006cac <_init>:
 8006cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cae:	bf00      	nop
 8006cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb2:	bc08      	pop	{r3}
 8006cb4:	469e      	mov	lr, r3
 8006cb6:	4770      	bx	lr

08006cb8 <_fini>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	bf00      	nop
 8006cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cbe:	bc08      	pop	{r3}
 8006cc0:	469e      	mov	lr, r3
 8006cc2:	4770      	bx	lr
